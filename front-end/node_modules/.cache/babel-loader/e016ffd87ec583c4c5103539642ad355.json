{"ast":null,"code":"import _objectSpread from \"D:\\\\C#\\\\react-blackjack\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\C#\\\\react-blackjack\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\C#\\\\react-blackjack\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { FETCH_PLAY_START, FETCH_MAKE_BET, HAND_SUCCESS, WIN_GAME, LOSE_GAME, DRAW_GAME, DEAL_HAND, PLAY_HAND, USER_PROFILE, DATA_USER, ENOUGH_HAND, USER_CONNECT, NEW_USER_CONNECT, USER_DISCONNECT, USER_READY, GAME_START, ACTIVE_PLAYER, NEW_MESSAGE, TIMER, BET, ENEMY_BET, USER_DIBS_BET, ENEMY_DIBS_BET, DELETE_DIBS, ENEMY_GET_CARD, GAME_RESULT, GAME_END } from './actionType';\nimport axios from 'axios';\nexport function onConnected(profiles) {\n  return {\n    type: USER_CONNECT,\n    profiles: profiles\n  };\n}\nexport function onNewUserConnected(newUser) {\n  return {\n    type: NEW_USER_CONNECT,\n    newUser: newUser\n  };\n}\nexport function onUserDisconnected(profile) {\n  return {\n    type: USER_DISCONNECT,\n    profile: profile\n  };\n}\nexport function onUserReady(profile) {\n  return {\n    type: USER_READY,\n    profile: profile\n  };\n}\nexport function onGameStart(user, enemy, messages) {\n  return {\n    type: GAME_START,\n    user: user,\n    enemy: enemy,\n    messages: messages\n  };\n}\nexport function setActivePlayer(id) {\n  var isBet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return {\n    type: ACTIVE_PLAYER,\n    id: id,\n    isBet: isBet\n  };\n}\nexport function onBet(user) {\n  return {\n    type: BET,\n    user: user\n  };\n}\nexport function onEnemyBet(enemy) {\n  return {\n    type: ENEMY_BET,\n    enemy: enemy\n  };\n}\nexport function userDibsBet(dibsBet) {\n  return {\n    type: USER_DIBS_BET,\n    dibsBet: dibsBet\n  };\n}\nexport function enemyDibsBet(dibsBet) {\n  return {\n    type: ENEMY_DIBS_BET,\n    dibsBet: dibsBet\n  };\n}\nexport function onMessage(message) {\n  return {\n    type: NEW_MESSAGE,\n    message: message\n  };\n}\nexport function onTimer(time) {\n  return {\n    type: TIMER,\n    time: time\n  };\n}\nexport function fetchMakeBet(bet, cash, isPlay) {\n  return {\n    type: FETCH_MAKE_BET,\n    bet: bet,\n    cash: cash,\n    isPlay: isPlay\n  };\n}\nexport function enemyGetCard() {\n  return {\n    type: ENEMY_GET_CARD\n  };\n}\nexport function gameResult(enemyHand, enemyHandSum) {\n  return {\n    type: GAME_RESULT,\n    enemyHand: enemyHand,\n    enemyHandSum: enemyHandSum\n  };\n}\nexport function gameEnd(winnerId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var state, cash, enemyCash, setState;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                state = getState().playTable;\n\n                if (winnerId === -1) {\n                  alert('Победила дружба!!!!!!!!!!!!!');\n                  cash = state.user.cash + state.user.bet;\n                  enemyCash = state.user.enemyCash + state.user.enemyBet;\n                } else if (winnerId === state.user.id) {\n                  alert('Вы выграли!!!!!!!!!!!!!');\n                  cash = state.user.cash + state.user.bet * 2;\n                  enemyCash = state.user.enemyCash;\n                } else {\n                  alert('Вы проиграли!!!!!!!');\n                  cash = state.user.cash;\n                  enemyCash = state.user.enemyCash + state.user.enemyBet * 2;\n                }\n\n                setState = {\n                  cash: cash,\n                  enemyCash: enemyCash\n                };\n                _context.next = 5;\n                return dispatch(endGame(setState));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function endGame(setState) {\n  return _objectSpread({\n    type: GAME_END\n  }, setState);\n}\nexport function getUserProfile(userId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var data, setStateUser, respons;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = {\n                  userId: userId\n                };\n                _context2.next = 3;\n                return axios.post('http://localhost:3001/profile', data);\n\n              case 3:\n                respons = _context2.sent;\n\n                if (respons.data) {\n                  setStateUser = {\n                    id: respons.data.id,\n                    cash: respons.data.bet,\n                    name: respons.data.name,\n                    email: respons.data.email\n                  };\n                }\n\n                dispatch(userProfile(setStateUser));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function getDataUser(userId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var data, setStateUser, respons;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                data = {\n                  userId: userId\n                };\n                _context3.next = 3;\n                return axios.post('http://localhost:3001/play', data);\n\n              case 3:\n                respons = _context3.sent;\n\n                if (respons.data) {\n                  setStateUser = {\n                    bet: 0,\n                    cash: respons.data.bet,\n                    name: respons.data.name,\n                    isPlay: false\n                  };\n                }\n\n                dispatch(dataUser(setStateUser));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onPlayWithUserHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n        var state, playerHand, playerHandSum, set_state;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                state = getState().playTable;\n                _context4.next = 3;\n                return [getCard(state), getCard(state)];\n\n              case 3:\n                playerHand = _context4.sent;\n                _context4.next = 6;\n                return getSum(playerHand);\n\n              case 6:\n                playerHandSum = _context4.sent;\n                set_state = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum,\n                  enemyHand: [],\n                  enemyHandSum: 0,\n                  isBet: false,\n                  isPlay: false,\n                  isEnough: true,\n                  isMore: true\n                };\n                dispatch(handSuccess(set_state));\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onMoreWithUserHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch, getState) {\n        var state, playerHand, playerHandSum, play_setState;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                state = getState().playTable;\n                playerHand = state.user.playerHand;\n                playerHand.push(getCard(state));\n                _context5.next = 5;\n                return getSum(playerHand);\n\n              case 5:\n                playerHandSum = _context5.sent;\n                play_setState = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum\n                };\n                dispatch(playHand(play_setState));\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x7, _x8) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onEnoughWithUserHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(dispatch) {\n        var set_state;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                set_state = {\n                  enoughCards: true,\n                  isPlay: false,\n                  isEnough: false,\n                  isMore: false\n                };\n                dispatch(enoughHand(set_state));\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x9) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onPlayHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(dispatch, getState) {\n        var state, playerHand, enemyHand, playerHandSum, enemyHandSum, set_state;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                state = getState().playTable;\n                _context7.next = 3;\n                return [getCard(state), getCard(state)];\n\n              case 3:\n                playerHand = _context7.sent;\n                _context7.next = 6;\n                return [getCard(state)];\n\n              case 6:\n                enemyHand = _context7.sent;\n                _context7.next = 9;\n                return getSum(playerHand);\n\n              case 9:\n                playerHandSum = _context7.sent;\n                _context7.next = 12;\n                return getSum(enemyHand);\n\n              case 12:\n                enemyHandSum = _context7.sent;\n                set_state = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum,\n                  enemyHand: enemyHand,\n                  enemyHandSum: enemyHandSum,\n                  isBet: true,\n                  isPlay: false,\n                  isEnough: true,\n                  isMore: true\n                };\n                dispatch(handSuccess(set_state));\n\n                if (playerHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.user.cash + state.user.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      enemyHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      enemyHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(winGame(win_setState));\n                    dispatch(onDeletDib());\n                    alert('У Вас BlackJack!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (playerHandSum > 21) {\n                  setTimeout(function () {\n                    var cash = state.user.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    dispatch(onDeletDib());\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      enemyHandSum: 0,\n                      playerHand: [],\n                      enemyHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 16:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x10, _x11) {\n        return _ref7.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onEnoughHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref8 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(dispatch, getState) {\n        var state, enemyHand, enemyHandSum, deal_setState_first, deal_setState;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                state = getState().playTable;\n                enemyHand = state.user.enemyHand;\n                _context8.next = 4;\n                return enemyHand.push(getCard(state));\n\n              case 4:\n                _context8.next = 6;\n                return getSum(enemyHand);\n\n              case 6:\n                enemyHandSum = _context8.sent;\n                deal_setState_first = {\n                  enemyHand: enemyHand,\n                  enemyHandSum: enemyHandSum\n                };\n                _context8.next = 10;\n                return dispatch(dealHand(deal_setState_first));\n\n              case 10:\n                if (!(enemyHandSum < 17)) {\n                  _context8.next = 21;\n                  break;\n                }\n\n                _context8.next = 13;\n                return enemyHand.push(getCard(state));\n\n              case 13:\n                _context8.next = 15;\n                return getSum(enemyHand);\n\n              case 15:\n                enemyHandSum = _context8.sent;\n                deal_setState = {\n                  enemyHand: enemyHand,\n                  enemyHandSum: enemyHandSum\n                };\n                _context8.next = 19;\n                return dispatch(dealHand(deal_setState));\n\n              case 19:\n                _context8.next = 10;\n                break;\n\n              case 21:\n                if (enemyHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.user.cash;\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      enemyHandSum: 0,\n                      playerHand: [],\n                      enemyHand: []\n                    };\n                    dispatch(loseGame(lose_setState));\n                    dispatch(onDeletDib());\n                    updateData(cash);\n                    alert('У дилера BlackJack! Вы проиграли(((((');\n                  }, 600);\n                } else if (enemyHandSum > 21 || state.user.playerHandSum > enemyHandSum) {\n                  setTimeout(function () {\n                    var cash = state.user.cash + state.user.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      enemyHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      enemyHand: []\n                    };\n                    dispatch(winGame(win_setState));\n                    dispatch(onDeletDib());\n                    updateData(cash);\n                    alert('Вы выграли!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (enemyHandSum === state.user.playerHandSum) {\n                  setTimeout(function () {\n                    var cash = state.user.cash + state.user.bet;\n                    var draw_setState = {\n                      playerHandSum: 0,\n                      enemyHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      enemyHand: []\n                    };\n                    dispatch(drawGame(draw_setState));\n                    dispatch(onDeletDib());\n                    updateData(cash);\n                    alert('Победила дружба!!!!!!!!!!!!!');\n                  }, 600);\n                } else {\n                  setTimeout(function () {\n                    var cash = state.user.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    dispatch(onDeletDib());\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      enemyHandSum: 0,\n                      playerHand: [],\n                      enemyHand: []\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 22:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function (_x12, _x13) {\n        return _ref8.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onMoreHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref9 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(dispatch, getState) {\n        var state, playerHand, playerHandSum, play_setState;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                state = getState().playTable;\n                playerHand = state.user.playerHand;\n                playerHand.push(getCard(state));\n                _context9.next = 5;\n                return getSum(playerHand);\n\n              case 5:\n                playerHandSum = _context9.sent;\n                play_setState = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum\n                };\n                dispatch(playHand(play_setState));\n\n                if (playerHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.user.cash + state.user.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      enemyHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      enemyHand: []\n                    };\n                    dispatch(winGame(win_setState));\n                    dispatch(onDeletDib());\n                    updateData(cash);\n                    alert('У Вас BlackJack!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (playerHandSum > 21) {\n                  setTimeout(function () {\n                    var cash = state.user.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    dispatch(onDeletDib());\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      enemyHandSum: 0,\n                      playerHand: [],\n                      enemyHand: []\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 9:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      return function (_x14, _x15) {\n        return _ref9.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function handSuccess(set_state) {\n  return _objectSpread({\n    type: HAND_SUCCESS\n  }, set_state);\n}\nexport function enoughHand(set_state) {\n  return _objectSpread({\n    type: ENOUGH_HAND\n  }, set_state);\n}\nexport function userProfile(setStateUser) {\n  return _objectSpread({\n    type: USER_PROFILE\n  }, setStateUser);\n}\nexport function dataUser(setStateUser) {\n  return _objectSpread({\n    type: DATA_USER\n  }, setStateUser);\n}\nexport function dealHand(deal_setState) {\n  return _objectSpread({\n    type: DEAL_HAND\n  }, deal_setState);\n}\nexport function playHand(play_setState) {\n  return _objectSpread({\n    type: PLAY_HAND\n  }, play_setState);\n}\nexport function winGame(win_setState) {\n  return _objectSpread({\n    type: WIN_GAME\n  }, win_setState);\n}\nexport function loseGame(lose_setState) {\n  return _objectSpread({\n    type: LOSE_GAME\n  }, lose_setState);\n}\nexport function drawGame(draw_setState) {\n  return _objectSpread({\n    type: DRAW_GAME\n  }, draw_setState);\n}\nexport function fetchPlayStart() {\n  return {\n    type: FETCH_PLAY_START\n  };\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getCard(state) {\n  return state.deck[getRandomInt(0, state.deck.length - 1)];\n}\n\nfunction getSum(hand) {\n  var sum = 0;\n\n  for (var i = 0; i < hand.length; i++) {\n    var card = hand[i];\n\n    if (card.name !== 'Ace') {\n      sum += card.value;\n    }\n  }\n\n  for (var _i = 0; _i < hand.length; _i++) {\n    var _card = hand[_i];\n\n    if (_card.name === 'Ace') {\n      if (sum > 10) {\n        sum++;\n      } else {\n        sum += _card.value;\n      }\n    }\n  }\n\n  return sum;\n}\n\nexport function onDeletDib() {\n  return {\n    type: DELETE_DIBS\n  };\n}\n\nfunction updateData(_x16) {\n  return _updateData.apply(this, arguments);\n}\n\nfunction _updateData() {\n  _updateData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee10(cash) {\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, this);\n  }));\n  return _updateData.apply(this, arguments);\n}","map":{"version":3,"sources":["D:\\C#\\react-blackjack\\front-end\\src\\store\\actions\\playTable.js"],"names":["FETCH_PLAY_START","FETCH_MAKE_BET","HAND_SUCCESS","WIN_GAME","LOSE_GAME","DRAW_GAME","DEAL_HAND","PLAY_HAND","USER_PROFILE","DATA_USER","ENOUGH_HAND","USER_CONNECT","NEW_USER_CONNECT","USER_DISCONNECT","USER_READY","GAME_START","ACTIVE_PLAYER","NEW_MESSAGE","TIMER","BET","ENEMY_BET","USER_DIBS_BET","ENEMY_DIBS_BET","DELETE_DIBS","ENEMY_GET_CARD","GAME_RESULT","GAME_END","axios","onConnected","profiles","type","onNewUserConnected","newUser","onUserDisconnected","profile","onUserReady","onGameStart","user","enemy","messages","setActivePlayer","id","isBet","onBet","onEnemyBet","userDibsBet","dibsBet","enemyDibsBet","onMessage","message","onTimer","time","fetchMakeBet","bet","cash","isPlay","enemyGetCard","gameResult","enemyHand","enemyHandSum","gameEnd","winnerId","dispatch","getState","state","playTable","alert","enemyCash","enemyBet","setState","endGame","getUserProfile","userId","data","post","respons","setStateUser","name","email","userProfile","getDataUser","dataUser","onPlayWithUserHandler","getCard","playerHand","getSum","playerHandSum","set_state","isEnough","isMore","handSuccess","onMoreWithUserHandler","push","play_setState","playHand","onEnoughWithUserHandler","enoughCards","enoughHand","onPlayHandler","setTimeout","win_setState","updateData","winGame","onDeletDib","lose_setState","loseGame","onEnoughHandler","deal_setState_first","dealHand","deal_setState","draw_setState","drawGame","onMoreHandler","fetchPlayStart","getRandomInt","min","max","Math","floor","random","deck","length","hand","sum","i","card","value"],"mappings":";;;AAAA,SAAQA,gBAAR,EACQC,cADR,EAEQC,YAFR,EAGQC,QAHR,EAIQC,SAJR,EAKQC,SALR,EAMQC,SANR,EAOQC,SAPR,EAQQC,YARR,EASQC,SATR,EAUQC,WAVR,EAWQC,YAXR,EAYQC,gBAZR,EAaQC,eAbR,EAcQC,UAdR,EAeQC,UAfR,EAgBQC,aAhBR,EAiBQC,WAjBR,EAkBQC,KAlBR,EAmBQC,GAnBR,EAoBQC,SApBR,EAqBQC,aArBR,EAsBQC,cAtBR,EAuBQC,WAvBR,EAwBQC,cAxBR,EAyBQC,WAzBR,EA0BQC,QA1BR,QA0BuB,cA1BvB;AA2BA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA8B;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAEnB,YADH;AAEHkB,IAAAA,QAAQ,EAARA;AAFG,GAAP;AAIH;AAED,OAAO,SAASE,kBAAT,CAA4BC,OAA5B,EAAoC;AACvC,SAAO;AACHF,IAAAA,IAAI,EAAElB,gBADH;AAEHoB,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAoC;AACvC,SAAO;AACHJ,IAAAA,IAAI,EAAEjB,eADH;AAEHqB,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,WAAT,CAAqBD,OAArB,EAA6B;AAChC,SAAO;AACHJ,IAAAA,IAAI,EAAEhB,UADH;AAEHoB,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASE,WAAT,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA2C;AAC9C,SAAO;AACHT,IAAAA,IAAI,EAAEf,UADH;AAEHsB,IAAAA,IAAI,EAAJA,IAFG;AAEGC,IAAAA,KAAK,EAALA,KAFH;AAEUC,IAAAA,QAAQ,EAARA;AAFV,GAAP;AAIH;AAED,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAA0C;AAAA,MAAbC,KAAa,uEAAL,IAAK;AAC7C,SAAO;AACHZ,IAAAA,IAAI,EAAEd,aADH;AAEHyB,IAAAA,EAAE,EAAFA,EAFG;AAECC,IAAAA,KAAK,EAALA;AAFD,GAAP;AAIH;AAED,OAAO,SAASC,KAAT,CAAeN,IAAf,EAAoB;AACvB,SAAO;AACHP,IAAAA,IAAI,EAAEX,GADH;AAEHkB,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH;AAED,OAAO,SAASO,UAAT,CAAoBN,KAApB,EAA0B;AAC7B,SAAO;AACHR,IAAAA,IAAI,EAAEV,SADH;AAEHkB,IAAAA,KAAK,EAALA;AAFG,GAAP;AAIH;AAED,OAAO,SAASO,WAAT,CAAqBC,OAArB,EAA6B;AAChC,SAAO;AACHhB,IAAAA,IAAI,EAAET,aADH;AAEHyB,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,YAAT,CAAsBD,OAAtB,EAA8B;AACjC,SAAO;AACHhB,IAAAA,IAAI,EAAER,cADH;AAEHwB,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASE,SAAT,CAAmBC,OAAnB,EAA2B;AAC9B,SAAO;AACHnB,IAAAA,IAAI,EAAEb,WADH;AAEHgC,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAsB;AACzB,SAAO;AACHrB,IAAAA,IAAI,EAAEZ,KADH;AAEHiC,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAwC;AAC3C,SAAO;AACHzB,IAAAA,IAAI,EAAE7B,cADH;AAEHoD,IAAAA,GAAG,EAAHA,GAFG;AAEEC,IAAAA,IAAI,EAAJA,IAFF;AAEQC,IAAAA,MAAM,EAANA;AAFR,GAAP;AAIH;AAED,OAAO,SAASC,YAAT,GAAuB;AAC1B,SAAO;AACH1B,IAAAA,IAAI,EAAEN;AADH,GAAP;AAGH;AAED,OAAO,SAASiC,UAAT,CAAoBC,SAApB,EAA+BC,YAA/B,EAA4C;AAC/C,SAAO;AACH7B,IAAAA,IAAI,EAAEL,WADH;AAEHiC,IAAAA,SAAS,EAATA,SAFG;AAEQC,IAAAA,YAAY,EAAZA;AAFR,GAAP;AAIH;AAED,OAAO,SAASC,OAAT,CAAiBC,QAAjB,EAA0B;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,KADH,GACWD,QAAQ,GAAGE,SADtB;;AAGH,oBAAGJ,QAAQ,KAAK,CAAC,CAAjB,EAAmB;AACfK,kBAAAA,KAAK,CAAC,8BAAD,CAAL;AACAZ,kBAAAA,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAX,GAAkBU,KAAK,CAAC3B,IAAN,CAAWgB,GAApC;AACAc,kBAAAA,SAAS,GAAGH,KAAK,CAAC3B,IAAN,CAAW8B,SAAX,GAAuBH,KAAK,CAAC3B,IAAN,CAAW+B,QAA9C;AACH,iBAJD,MAKK,IAAGP,QAAQ,KAAKG,KAAK,CAAC3B,IAAN,CAAWI,EAA3B,EAA8B;AAC/ByB,kBAAAA,KAAK,CAAC,yBAAD,CAAL;AACAZ,kBAAAA,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAX,GAAkBU,KAAK,CAAC3B,IAAN,CAAWgB,GAAX,GAAiB,CAA1C;AACAc,kBAAAA,SAAS,GAAGH,KAAK,CAAC3B,IAAN,CAAW8B,SAAvB;AACH,iBAJI,MAKD;AACAD,kBAAAA,KAAK,CAAC,qBAAD,CAAL;AACAZ,kBAAAA,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAlB;AACAa,kBAAAA,SAAS,GAAGH,KAAK,CAAC3B,IAAN,CAAW8B,SAAX,GAAuBH,KAAK,CAAC3B,IAAN,CAAW+B,QAAX,GAAsB,CAAzD;AACH;;AACKC,gBAAAA,QAlBH,GAkBc;AACbf,kBAAAA,IAAI,EAAJA,IADa;AAEba,kBAAAA,SAAS,EAATA;AAFa,iBAlBd;AAAA;AAAA,uBAsBGL,QAAQ,CAACQ,OAAO,CAACD,QAAD,CAAR,CAtBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBH;AAED,OAAO,SAASC,OAAT,CAAiBD,QAAjB,EAA0B;AAC7B;AACIvC,IAAAA,IAAI,EAAEJ;AADV,KAEO2C,QAFP;AAIH;AAED,OAAO,SAASE,cAAT,CAAwBC,MAAxB,EAA+B;AAClC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAMV,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACGW,gBAAAA,IADH,GACU;AACTD,kBAAAA,MAAM,EAAEA;AADC,iBADV;AAAA;AAAA,uBAKmB7C,KAAK,CAAC+C,IAAN,CAAW,+BAAX,EAA4CD,IAA5C,CALnB;;AAAA;AAKGE,gBAAAA,OALH;;AAMH,oBAAGA,OAAO,CAACF,IAAX,EAAgB;AACZG,kBAAAA,YAAY,GAAG;AACXnC,oBAAAA,EAAE,EAAEkC,OAAO,CAACF,IAAR,CAAahC,EADN;AAEXa,oBAAAA,IAAI,EAAEqB,OAAO,CAACF,IAAR,CAAapB,GAFR;AAGXwB,oBAAAA,IAAI,EAAEF,OAAO,CAACF,IAAR,CAAaI,IAHR;AAIXC,oBAAAA,KAAK,EAAEH,OAAO,CAACF,IAAR,CAAaK;AAJT,mBAAf;AAMH;;AAEDhB,gBAAAA,QAAQ,CAACiB,WAAW,CAACH,YAAD,CAAZ,CAAR;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBH;AAED,OAAO,SAASI,WAAT,CAAqBR,MAArB,EAA4B;AAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAMV,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACGW,gBAAAA,IADH,GACU;AACTD,kBAAAA,MAAM,EAAEA;AADC,iBADV;AAAA;AAAA,uBAKmB7C,KAAK,CAAC+C,IAAN,CAAW,4BAAX,EAAyCD,IAAzC,CALnB;;AAAA;AAKGE,gBAAAA,OALH;;AAMH,oBAAGA,OAAO,CAACF,IAAX,EAAgB;AACZG,kBAAAA,YAAY,GAAG;AACXvB,oBAAAA,GAAG,EAAE,CADM;AAEXC,oBAAAA,IAAI,EAAEqB,OAAO,CAACF,IAAR,CAAapB,GAFR;AAGXwB,oBAAAA,IAAI,EAAEF,OAAO,CAACF,IAAR,CAAaI,IAHR;AAIXtB,oBAAAA,MAAM,EAAE;AAJG,mBAAf;AAMH;;AAEDO,gBAAAA,QAAQ,CAACmB,QAAQ,CAACL,YAAD,CAAT,CAAR;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBH;AAED,OAAO,SAASM,qBAAT,GAAiC;AACpC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOpB,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,KADH,GACWD,QAAQ,GAAGE,SADtB;AAAA;AAAA,uBAEoB,CAACkB,OAAO,CAACnB,KAAD,CAAR,EAAiBmB,OAAO,CAACnB,KAAD,CAAxB,CAFpB;;AAAA;AAECoB,gBAAAA,UAFD;AAAA;AAAA,uBAGuBC,MAAM,CAACD,UAAD,CAH7B;;AAAA;AAGCE,gBAAAA,aAHD;AAKGC,gBAAAA,SALH,GAKe;AACdH,kBAAAA,UAAU,EAAVA,UADc;AAEdE,kBAAAA,aAAa,EAAbA,aAFc;AAGd5B,kBAAAA,SAAS,EAAE,EAHG;AAIdC,kBAAAA,YAAY,EAAE,CAJA;AAKdjB,kBAAAA,KAAK,EAAE,KALO;AAMda,kBAAAA,MAAM,EAAE,KANM;AAOdiC,kBAAAA,QAAQ,EAAE,IAPI;AAQdC,kBAAAA,MAAM,EAAE;AARM,iBALf;AAgBH3B,gBAAAA,QAAQ,CAAC4B,WAAW,CAACH,SAAD,CAAZ,CAAR;;AAhBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBH;AAED,OAAO,SAASI,qBAAT,GAAgC;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAO7B,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,KADH,GACWD,QAAQ,GAAGE,SADtB;AAECmB,gBAAAA,UAFD,GAEcpB,KAAK,CAAC3B,IAAN,CAAW+C,UAFzB;AAGHA,gBAAAA,UAAU,CAACQ,IAAX,CAAgBT,OAAO,CAACnB,KAAD,CAAvB;AAHG;AAAA,uBAIuBqB,MAAM,CAACD,UAAD,CAJ7B;;AAAA;AAICE,gBAAAA,aAJD;AAKGO,gBAAAA,aALH,GAKmB;AAClBT,kBAAAA,UAAU,EAAVA,UADkB;AAElBE,kBAAAA,aAAa,EAAbA;AAFkB,iBALnB;AASHxB,gBAAAA,QAAQ,CAACgC,QAAQ,CAACD,aAAD,CAAT,CAAR;;AATG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAWH;AAED,OAAO,SAASE,uBAAT,GAAkC;AACrC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOjC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACGyB,gBAAAA,SADH,GACe;AACdS,kBAAAA,WAAW,EAAE,IADC;AAEdzC,kBAAAA,MAAM,EAAE,KAFM;AAGdiC,kBAAAA,QAAQ,EAAE,KAHI;AAIdC,kBAAAA,MAAM,EAAE;AAJM,iBADf;AAQH3B,gBAAAA,QAAQ,CAACmC,UAAU,CAACV,SAAD,CAAX,CAAR;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUH;AAED,OAAO,SAASW,aAAT,GAAyB;AAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOpC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,KADH,GACWD,QAAQ,GAAGE,SADtB;AAAA;AAAA,uBAEoB,CAACkB,OAAO,CAACnB,KAAD,CAAR,EAAiBmB,OAAO,CAACnB,KAAD,CAAxB,CAFpB;;AAAA;AAECoB,gBAAAA,UAFD;AAAA;AAAA,uBAGmB,CAACD,OAAO,CAACnB,KAAD,CAAR,CAHnB;;AAAA;AAGCN,gBAAAA,SAHD;AAAA;AAAA,uBAIuB2B,MAAM,CAACD,UAAD,CAJ7B;;AAAA;AAICE,gBAAAA,aAJD;AAAA;AAAA,uBAKsBD,MAAM,CAAC3B,SAAD,CAL5B;;AAAA;AAKCC,gBAAAA,YALD;AAOG4B,gBAAAA,SAPH,GAOe;AACdH,kBAAAA,UAAU,EAAVA,UADc;AAEdE,kBAAAA,aAAa,EAAbA,aAFc;AAGd5B,kBAAAA,SAAS,EAATA,SAHc;AAIdC,kBAAAA,YAAY,EAAZA,YAJc;AAKdjB,kBAAAA,KAAK,EAAE,IALO;AAMda,kBAAAA,MAAM,EAAE,KANM;AAOdiC,kBAAAA,QAAQ,EAAE,IAPI;AAQdC,kBAAAA,MAAM,EAAE;AARM,iBAPf;AAkBH3B,gBAAAA,QAAQ,CAAC4B,WAAW,CAACH,SAAD,CAAZ,CAAR;;AAEA,oBAAGD,aAAa,KAAK,EAArB,EAAwB;AACpBa,kBAAAA,UAAU,CAAC,YAAI;AACX,wBAAI7C,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAX,GAAkBU,KAAK,CAAC3B,IAAN,CAAWgB,GAAX,GAAiB,CAA9C;AACA,wBAAM+C,YAAY,GAAG;AACjBd,sBAAAA,aAAa,EAAE,CADE;AAEjB3B,sBAAAA,YAAY,EAAE,CAFG;AAGjBN,sBAAAA,GAAG,EAAE,CAHY;AAIjBC,sBAAAA,IAAI,EAAJA,IAJiB;AAKjB8B,sBAAAA,UAAU,EAAC,EALM;AAMjB1B,sBAAAA,SAAS,EAAC,EANO;AAOjB8B,sBAAAA,QAAQ,EAAE,KAPO;AAQjBC,sBAAAA,MAAM,EAAE;AARS,qBAArB;AAUAY,oBAAAA,UAAU,CAAC/C,IAAD,CAAV;AACAQ,oBAAAA,QAAQ,CAACwC,OAAO,CAACF,YAAD,CAAR,CAAR;AACAtC,oBAAAA,QAAQ,CAACyC,UAAU,EAAX,CAAR;AACArC,oBAAAA,KAAK,CAAC,8BAAD,CAAL;AACH,mBAhBS,EAgBP,GAhBO,CAAV;AAkBH,iBAnBD,MAmBM,IAAGoB,aAAa,GAAG,EAAnB,EAAsB;AACxBa,kBAAAA,UAAU,CAAC,YAAI;AACX,wBAAI7C,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAtB;AACAY,oBAAAA,KAAK,CAAC,qBAAD,CAAL;AACAJ,oBAAAA,QAAQ,CAACyC,UAAU,EAAX,CAAR;AACA,wBAAMC,aAAa,GAAG;AAClBlB,sBAAAA,aAAa,EAAE,CADG;AAElBjC,sBAAAA,GAAG,EAAE,CAFa;AAGlBM,sBAAAA,YAAY,EAAE,CAHI;AAIlByB,sBAAAA,UAAU,EAAC,EAJO;AAKlB1B,sBAAAA,SAAS,EAAC,EALQ;AAMlB8B,sBAAAA,QAAQ,EAAE,KANQ;AAOlBC,sBAAAA,MAAM,EAAE;AAPU,qBAAtB;AASAY,oBAAAA,UAAU,CAAC/C,IAAD,CAAV;AACAQ,oBAAAA,QAAQ,CAAC2C,QAAQ,CAACD,aAAD,CAAT,CAAR;AACH,mBAfS,EAeP,GAfO,CAAV;AAiBH;;AAzDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AA2DH;AAED,OAAO,SAASE,eAAT,GAA0B;AAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAO5C,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,KADH,GACWD,QAAQ,GAAGE,SADtB;AAECP,gBAAAA,SAFD,GAEaM,KAAK,CAAC3B,IAAN,CAAWqB,SAFxB;AAAA;AAAA,uBAGGA,SAAS,CAACkC,IAAV,CAAeT,OAAO,CAACnB,KAAD,CAAtB,CAHH;;AAAA;AAAA;AAAA,uBAIsBqB,MAAM,CAAC3B,SAAD,CAJ5B;;AAAA;AAICC,gBAAAA,YAJD;AAKGgD,gBAAAA,mBALH,GAKyB;AACxBjD,kBAAAA,SAAS,EAATA,SADwB;AAExBC,kBAAAA,YAAY,EAAZA;AAFwB,iBALzB;AAAA;AAAA,uBASGG,QAAQ,CAAC8C,QAAQ,CAACD,mBAAD,CAAT,CATX;;AAAA;AAAA,sBAWGhD,YAAY,GAAG,EAXlB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAYOD,SAAS,CAACkC,IAAV,CAAeT,OAAO,CAACnB,KAAD,CAAtB,CAZP;;AAAA;AAAA;AAAA,uBAasBqB,MAAM,CAAC3B,SAAD,CAb5B;;AAAA;AAaCC,gBAAAA,YAbD;AAcOkD,gBAAAA,aAdP,GAcuB;AAClBnD,kBAAAA,SAAS,EAATA,SADkB;AAElBC,kBAAAA,YAAY,EAAZA;AAFkB,iBAdvB;AAAA;AAAA,uBAkBOG,QAAQ,CAAC8C,QAAQ,CAACC,aAAD,CAAT,CAlBf;;AAAA;AAAA;AAAA;;AAAA;AAqBH,oBAAGlD,YAAY,KAAK,EAApB,EAAuB;AACnBwC,kBAAAA,UAAU,CAAC,YAAI;AACX,wBAAI7C,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAtB;AACA,wBAAMkD,aAAa,GAAG;AAClBlB,sBAAAA,aAAa,EAAE,CADG;AAElBjC,sBAAAA,GAAG,EAAE,CAFa;AAGlBM,sBAAAA,YAAY,EAAE,CAHI;AAIlByB,sBAAAA,UAAU,EAAC,EAJO;AAKlB1B,sBAAAA,SAAS,EAAC;AALQ,qBAAtB;AAOAI,oBAAAA,QAAQ,CAAC2C,QAAQ,CAACD,aAAD,CAAT,CAAR;AACA1C,oBAAAA,QAAQ,CAACyC,UAAU,EAAX,CAAR;AACAF,oBAAAA,UAAU,CAAC/C,IAAD,CAAV;AACAY,oBAAAA,KAAK,CAAC,uCAAD,CAAL;AACH,mBAbS,EAaP,GAbO,CAAV;AAcH,iBAfD,MAeM,IAAGP,YAAY,GAAG,EAAf,IAAqBK,KAAK,CAAC3B,IAAN,CAAWiD,aAAX,GAA2B3B,YAAnD,EAAgE;AAClEwC,kBAAAA,UAAU,CAAC,YAAI;AACX,wBAAI7C,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAX,GAAkBU,KAAK,CAAC3B,IAAN,CAAWgB,GAAX,GAAiB,CAA9C;AACA,wBAAM+C,YAAY,GAAG;AACjBd,sBAAAA,aAAa,EAAE,CADE;AAEjB3B,sBAAAA,YAAY,EAAE,CAFG;AAGjBN,sBAAAA,GAAG,EAAE,CAHY;AAIjBC,sBAAAA,IAAI,EAAJA,IAJiB;AAKjB8B,sBAAAA,UAAU,EAAC,EALM;AAMjB1B,sBAAAA,SAAS,EAAC;AANO,qBAArB;AAQAI,oBAAAA,QAAQ,CAACwC,OAAO,CAACF,YAAD,CAAR,CAAR;AACAtC,oBAAAA,QAAQ,CAACyC,UAAU,EAAX,CAAR;AACAF,oBAAAA,UAAU,CAAC/C,IAAD,CAAV;AACAY,oBAAAA,KAAK,CAAC,yBAAD,CAAL;AACH,mBAdS,EAcP,GAdO,CAAV;AAeH,iBAhBK,MAgBA,IAAGP,YAAY,KAAKK,KAAK,CAAC3B,IAAN,CAAWiD,aAA/B,EAA6C;AAC/Ca,kBAAAA,UAAU,CAAC,YAAI;AACX,wBAAI7C,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAX,GAAkBU,KAAK,CAAC3B,IAAN,CAAWgB,GAAxC;AACA,wBAAMyD,aAAa,GAAG;AAClBxB,sBAAAA,aAAa,EAAE,CADG;AAElB3B,sBAAAA,YAAY,EAAE,CAFI;AAGlBN,sBAAAA,GAAG,EAAE,CAHa;AAIlBC,sBAAAA,IAAI,EAAJA,IAJkB;AAKlB8B,sBAAAA,UAAU,EAAC,EALO;AAMlB1B,sBAAAA,SAAS,EAAC;AANQ,qBAAtB;AAQAI,oBAAAA,QAAQ,CAACiD,QAAQ,CAACD,aAAD,CAAT,CAAR;AACAhD,oBAAAA,QAAQ,CAACyC,UAAU,EAAX,CAAR;AACAF,oBAAAA,UAAU,CAAC/C,IAAD,CAAV;AACAY,oBAAAA,KAAK,CAAC,8BAAD,CAAL;AACH,mBAdS,EAcP,GAdO,CAAV;AAeH,iBAhBK,MAgBD;AACDiC,kBAAAA,UAAU,CAAC,YAAI;AACX,wBAAI7C,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAtB;AACAY,oBAAAA,KAAK,CAAC,qBAAD,CAAL;AACAJ,oBAAAA,QAAQ,CAACyC,UAAU,EAAX,CAAR;AACA,wBAAMC,aAAa,GAAG;AAClBlB,sBAAAA,aAAa,EAAE,CADG;AAElBjC,sBAAAA,GAAG,EAAE,CAFa;AAGlBM,sBAAAA,YAAY,EAAE,CAHI;AAIlByB,sBAAAA,UAAU,EAAC,EAJO;AAKlB1B,sBAAAA,SAAS,EAAC;AALQ,qBAAtB;AAOA2C,oBAAAA,UAAU,CAAC/C,IAAD,CAAV;AACAQ,oBAAAA,QAAQ,CAAC2C,QAAQ,CAACD,aAAD,CAAT,CAAR;AACH,mBAbS,EAaP,GAbO,CAAV;AAcH;;AAnFE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqFH;AAED,OAAO,SAASQ,aAAT,GAAwB;AAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAOlD,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,gBAAAA,KADH,GACWD,QAAQ,GAAGE,SADtB;AAECmB,gBAAAA,UAFD,GAEcpB,KAAK,CAAC3B,IAAN,CAAW+C,UAFzB;AAGHA,gBAAAA,UAAU,CAACQ,IAAX,CAAgBT,OAAO,CAACnB,KAAD,CAAvB;AAHG;AAAA,uBAIuBqB,MAAM,CAACD,UAAD,CAJ7B;;AAAA;AAICE,gBAAAA,aAJD;AAKGO,gBAAAA,aALH,GAKmB;AAClBT,kBAAAA,UAAU,EAAVA,UADkB;AAElBE,kBAAAA,aAAa,EAAbA;AAFkB,iBALnB;AASHxB,gBAAAA,QAAQ,CAACgC,QAAQ,CAACD,aAAD,CAAT,CAAR;;AAGA,oBAAGP,aAAa,KAAK,EAArB,EAAwB;AACpBa,kBAAAA,UAAU,CAAC,YAAI;AACX,wBAAI7C,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAX,GAAkBU,KAAK,CAAC3B,IAAN,CAAWgB,GAAX,GAAiB,CAA9C;AACA,wBAAM+C,YAAY,GAAG;AACjBd,sBAAAA,aAAa,EAAE,CADE;AAEjB3B,sBAAAA,YAAY,EAAE,CAFG;AAGjBN,sBAAAA,GAAG,EAAE,CAHY;AAIjBC,sBAAAA,IAAI,EAAJA,IAJiB;AAKjB8B,sBAAAA,UAAU,EAAC,EALM;AAMjB1B,sBAAAA,SAAS,EAAC;AANO,qBAArB;AAQAI,oBAAAA,QAAQ,CAACwC,OAAO,CAACF,YAAD,CAAR,CAAR;AACAtC,oBAAAA,QAAQ,CAACyC,UAAU,EAAX,CAAR;AACAF,oBAAAA,UAAU,CAAC/C,IAAD,CAAV;AACAY,oBAAAA,KAAK,CAAC,8BAAD,CAAL;AACH,mBAdS,EAcP,GAdO,CAAV;AAgBH,iBAjBD,MAiBM,IAAGoB,aAAa,GAAG,EAAnB,EAAsB;AACxBa,kBAAAA,UAAU,CAAC,YAAI;AACX,wBAAI7C,IAAI,GAAGU,KAAK,CAAC3B,IAAN,CAAWiB,IAAtB;AACAY,oBAAAA,KAAK,CAAC,qBAAD,CAAL;AACAJ,oBAAAA,QAAQ,CAACyC,UAAU,EAAX,CAAR;AACA,wBAAMC,aAAa,GAAG;AAClBlB,sBAAAA,aAAa,EAAE,CADG;AAElBjC,sBAAAA,GAAG,EAAE,CAFa;AAGlBM,sBAAAA,YAAY,EAAE,CAHI;AAIlByB,sBAAAA,UAAU,EAAC,EAJO;AAKlB1B,sBAAAA,SAAS,EAAC;AALQ,qBAAtB;AAOA2C,oBAAAA,UAAU,CAAC/C,IAAD,CAAV;AACAQ,oBAAAA,QAAQ,CAAC2C,QAAQ,CAACD,aAAD,CAAT,CAAR;AACH,mBAbS,EAaP,GAbO,CAAV;AAcH;;AA5CE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CH;AAED,OAAO,SAASd,WAAT,CAAqBH,SAArB,EAA+B;AAClC;AACIzD,IAAAA,IAAI,EAAE5B;AADV,KAEOqF,SAFP;AAIH;AAED,OAAO,SAASU,UAAT,CAAoBV,SAApB,EAA8B;AACjC;AACIzD,IAAAA,IAAI,EAAEpB;AADV,KAEO6E,SAFP;AAIH;AAED,OAAO,SAASR,WAAT,CAAqBH,YAArB,EAAkC;AACrC;AACI9C,IAAAA,IAAI,EAAEtB;AADV,KAEOoE,YAFP;AAIH;AAED,OAAO,SAASK,QAAT,CAAkBL,YAAlB,EAA+B;AAClC;AACI9C,IAAAA,IAAI,EAAErB;AADV,KAEOmE,YAFP;AAIH;AAED,OAAO,SAASgC,QAAT,CAAkBC,aAAlB,EAAgC;AACnC;AACI/E,IAAAA,IAAI,EAAExB;AADV,KAEOuG,aAFP;AAIH;AAED,OAAO,SAASf,QAAT,CAAkBD,aAAlB,EAAgC;AACnC;AACI/D,IAAAA,IAAI,EAAEvB;AADV,KAEOsF,aAFP;AAIH;AAED,OAAO,SAASS,OAAT,CAAiBF,YAAjB,EAA8B;AACjC;AACItE,IAAAA,IAAI,EAAE3B;AADV,KAEOiG,YAFP;AAIH;AAED,OAAO,SAASK,QAAT,CAAkBD,aAAlB,EAAgC;AACnC;AACI1E,IAAAA,IAAI,EAAE1B;AADV,KAEOoG,aAFP;AAIH;AAED,OAAO,SAASO,QAAT,CAAkBD,aAAlB,EAAgC;AACnC;AACIhF,IAAAA,IAAI,EAAEzB;AADV,KAEOyG,aAFP;AAIH;AAED,OAAO,SAASG,cAAT,GAAyB;AAC5B,SAAM;AACFnF,IAAAA,IAAI,EAAE9B;AADJ,GAAN;AAGH;;AAED,SAASkH,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC5B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH;;AAED,SAAShC,OAAT,CAAiBnB,KAAjB,EAAuB;AACnB,SAAOA,KAAK,CAACwD,IAAN,CAAWN,YAAY,CAAC,CAAD,EAAIlD,KAAK,CAACwD,IAAN,CAAWC,MAAX,GAAoB,CAAxB,CAAvB,CAAP;AACH;;AAED,SAASpC,MAAT,CAAiBqC,IAAjB,EAAsB;AAClB,MAAIC,GAAG,GAAG,CAAV;;AAEA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,IAAI,CAACD,MAArB,EAA6BG,CAAC,EAA9B,EAAiC;AAC7B,QAAIC,IAAI,GAAGH,IAAI,CAACE,CAAD,CAAf;;AACA,QAAGC,IAAI,CAAChD,IAAL,KAAc,KAAjB,EAAuB;AACnB8C,MAAAA,GAAG,IAAIE,IAAI,CAACC,KAAZ;AACH;AACJ;;AAED,OAAI,IAAIF,EAAC,GAAC,CAAV,EAAaA,EAAC,GAACF,IAAI,CAACD,MAApB,EAA4BG,EAAC,EAA7B,EAAgC;AAC5B,QAAIC,KAAI,GAAGH,IAAI,CAACE,EAAD,CAAf;;AACA,QAAGC,KAAI,CAAChD,IAAL,KAAc,KAAjB,EAAuB;AACnB,UAAG8C,GAAG,GAAG,EAAT,EAAY;AACRA,QAAAA,GAAG;AACN,OAFD,MAEK;AACDA,QAAAA,GAAG,IAAIE,KAAI,CAACC,KAAZ;AACH;AACJ;AACJ;;AAED,SAAOH,GAAP;AACH;;AAED,OAAO,SAASpB,UAAT,GAAsB;AACzB,SAAM;AACFzE,IAAAA,IAAI,EAAEP;AADJ,GAAN;AAGH;;SAGc8E,U;;;;;;;2BAAf,mBAA0B/C,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {FETCH_PLAY_START,\n        FETCH_MAKE_BET,\n        HAND_SUCCESS,\n        WIN_GAME,\n        LOSE_GAME,\n        DRAW_GAME,\n        DEAL_HAND,\n        PLAY_HAND,\n        USER_PROFILE,\n        DATA_USER,\n        ENOUGH_HAND,\n        USER_CONNECT,\n        NEW_USER_CONNECT,\n        USER_DISCONNECT,\n        USER_READY,\n        GAME_START,\n        ACTIVE_PLAYER,\n        NEW_MESSAGE,\n        TIMER,\n        BET,\n        ENEMY_BET,\n        USER_DIBS_BET,\n        ENEMY_DIBS_BET,\n        DELETE_DIBS,\n        ENEMY_GET_CARD,\n        GAME_RESULT,\n        GAME_END} from './actionType'\nimport axios from 'axios'\n\nexport function onConnected(profiles){\n    return {\n        type: USER_CONNECT,\n        profiles\n    }\n}\n\nexport function onNewUserConnected(newUser){\n    return {\n        type: NEW_USER_CONNECT,\n        newUser\n    }\n}\n\nexport function onUserDisconnected(profile){\n    return {\n        type: USER_DISCONNECT,\n        profile\n    }\n}\n\nexport function onUserReady(profile){\n    return {\n        type: USER_READY,\n        profile\n    }\n}\n\nexport function onGameStart(user, enemy, messages){\n    return {\n        type: GAME_START,\n        user, enemy, messages\n    }\n}\n\nexport function setActivePlayer(id, isBet = true){\n    return {\n        type: ACTIVE_PLAYER,\n        id, isBet\n    }\n}\n\nexport function onBet(user){\n    return {\n        type: BET,\n        user\n    }\n}\n\nexport function onEnemyBet(enemy){\n    return {\n        type: ENEMY_BET,\n        enemy\n    }\n}\n\nexport function userDibsBet(dibsBet){\n    return {\n        type: USER_DIBS_BET,\n        dibsBet\n    }\n}\n\nexport function enemyDibsBet(dibsBet){\n    return {\n        type: ENEMY_DIBS_BET,\n        dibsBet\n    }\n}\n\nexport function onMessage(message){\n    return {\n        type: NEW_MESSAGE,\n        message\n    }\n}\n\nexport function onTimer(time){\n    return {\n        type: TIMER,\n        time\n    }\n}\n\nexport function fetchMakeBet(bet, cash, isPlay){\n    return {\n        type: FETCH_MAKE_BET,\n        bet, cash, isPlay\n    }\n}\n\nexport function enemyGetCard(){\n    return {\n        type: ENEMY_GET_CARD\n    }\n}\n\nexport function gameResult(enemyHand, enemyHandSum){\n    return {\n        type: GAME_RESULT,\n        enemyHand, enemyHandSum\n    }\n}\n\nexport function gameEnd(winnerId){\n    return async (dispatch, getState) => {        \n        const state = getState().playTable;\n        let cash, enemyCash;\n        if(winnerId === -1){\n            alert('Победила дружба!!!!!!!!!!!!!'); \n            cash = state.user.cash + state.user.bet;\n            enemyCash = state.user.enemyCash + state.user.enemyBet;\n        }\n        else if(winnerId === state.user.id){\n            alert('Вы выграли!!!!!!!!!!!!!'); \n            cash = state.user.cash + state.user.bet * 2;\n            enemyCash = state.user.enemyCash;\n        }\n        else{\n            alert('Вы проиграли!!!!!!!');\n            cash = state.user.cash;\n            enemyCash = state.user.enemyCash + state.user.enemyBet * 2;\n        }\n        const setState = {\n            cash,\n            enemyCash\n        }; \n        await dispatch(endGame(setState));\n    }\n}\n\nexport function endGame(setState){\n    return{\n        type: GAME_END,\n        ...setState\n    }\n}\n\nexport function getUserProfile(userId){\n    return async dispatch =>{\n        const data = {\n            userId: userId  \n        }\n        let setStateUser;\n        const respons = await axios.post('http://localhost:3001/profile', data);\n        if(respons.data){\n            setStateUser = {\n                id: respons.data.id,\n                cash: respons.data.bet,\n                name: respons.data.name,\n                email: respons.data.email\n            }\n        }\n\n        dispatch(userProfile(setStateUser));\n    }\n}\n\nexport function getDataUser(userId){\n    return async dispatch =>{\n        const data = {\n            userId: userId  \n        }\n        let setStateUser;\n        const respons = await axios.post('http://localhost:3001/play', data);\n        if(respons.data){\n            setStateUser = {\n                bet: 0,\n                cash: respons.data.bet,\n                name: respons.data.name,\n                isPlay: false\n            }\n        }\n        \n        dispatch(dataUser(setStateUser));\n    }\n       \n}\n\nexport function onPlayWithUserHandler (){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        let playerHand = await [getCard(state), getCard(state)];\n        let playerHandSum = await getSum(playerHand);\n\n        const set_state = {\n            playerHand,\n            playerHandSum,\n            enemyHand: [],\n            enemyHandSum: 0,\n            isBet: false,\n            isPlay: false,\n            isEnough: true,\n            isMore: true\n        };\n\n        dispatch(handSuccess(set_state));\n    }\n}\n\nexport function onMoreWithUserHandler(){\n    return async (dispatch, getState) =>{\n        const state = getState().playTable;\n        let playerHand = state.user.playerHand;\n        playerHand.push(getCard(state));\n        let playerHandSum = await getSum(playerHand);\n        const play_setState = {\n            playerHand,\n            playerHandSum\n        }\n        dispatch(playHand(play_setState));\n    }\n}\n\nexport function onEnoughWithUserHandler(){\n    return async (dispatch) => {\n        const set_state = {\n            enoughCards: true,\n            isPlay: false,\n            isEnough: false,\n            isMore: false\n        };\n\n        dispatch(enoughHand(set_state));\n    }\n}\n\nexport function onPlayHandler (){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        let playerHand = await [getCard(state), getCard(state)];\n        let enemyHand = await [getCard(state)];\n        let playerHandSum = await getSum(playerHand);\n        let enemyHandSum = await getSum(enemyHand);\n\n        const set_state = {\n            playerHand,\n            playerHandSum,\n            enemyHand,\n            enemyHandSum,\n            isBet: true,\n            isPlay: false,\n            isEnough: true,\n            isMore: true\n        };\n\n        dispatch(handSuccess(set_state));\n\n        if(playerHandSum === 21){ \n            setTimeout(()=>{\n                let cash = state.user.cash + state.user.bet * 2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    enemyHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    enemyHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(winGame(win_setState)); \n                dispatch(onDeletDib());  \n                alert('У Вас BlackJack!!!!!!!!!!!!!'); \n            }, 600);           \n            \n        }else if(playerHandSum > 21){\n            setTimeout(()=>{\n                let cash = state.user.cash;\n                alert('Вы проиграли!!!!!!!');\n                dispatch(onDeletDib());\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    enemyHandSum: 0,\n                    playerHand:[],\n                    enemyHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));  \n            }, 600);\n            \n        }   \n    }    \n}\n\nexport function onEnoughHandler(){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        let enemyHand = state.user.enemyHand;\n        await enemyHand.push(getCard(state));\n        let enemyHandSum = await getSum(enemyHand);\n        const deal_setState_first = {\n            enemyHand,\n            enemyHandSum\n        }\n        await dispatch(dealHand(deal_setState_first));\n        \n        while(enemyHandSum < 17){\n            await enemyHand.push(getCard(state));\n            enemyHandSum = await getSum(enemyHand);\n            const deal_setState = {\n                enemyHand,\n                enemyHandSum\n            }\n            await dispatch(dealHand(deal_setState));\n        }\n\n        if(enemyHandSum === 21){\n            setTimeout(()=>{\n                let cash = state.user.cash;\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    enemyHandSum: 0,\n                    playerHand:[],\n                    enemyHand:[]\n                }; \n                dispatch(loseGame(lose_setState));\n                dispatch(onDeletDib()); \n                updateData(cash); \n                alert('У дилера BlackJack! Вы проиграли((((('); \n            }, 600); \n        }else if(enemyHandSum > 21 || state.user.playerHandSum > enemyHandSum){\n            setTimeout(()=>{\n                let cash = state.user.cash + state.user.bet * 2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    enemyHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    enemyHand:[]\n                }; \n                dispatch(winGame(win_setState));\n                dispatch(onDeletDib());  \n                updateData(cash);\n                alert('Вы выграли!!!!!!!!!!!!!'); \n            }, 600);        \n        }else if(enemyHandSum === state.user.playerHandSum){\n            setTimeout(()=>{\n                let cash = state.user.cash + state.user.bet;\n                const draw_setState = {\n                    playerHandSum: 0,\n                    enemyHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    enemyHand:[]\n                }; \n                dispatch(drawGame(draw_setState));\n                dispatch(onDeletDib());  \n                updateData(cash);\n                alert('Победила дружба!!!!!!!!!!!!!'); \n            }, 600); \n        }else{\n            setTimeout(()=>{\n                let cash = state.user.cash;\n                alert('Вы проиграли!!!!!!!');\n                dispatch(onDeletDib());\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    enemyHandSum: 0,\n                    playerHand:[],\n                    enemyHand:[]\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));\n            }, 600);\n        }        \n    }\n}\n\nexport function onMoreHandler(){\n    return async (dispatch, getState) =>{\n        const state = getState().playTable;\n        let playerHand = state.user.playerHand;\n        playerHand.push(getCard(state));\n        let playerHandSum = await getSum(playerHand);\n        const play_setState = {\n            playerHand,\n            playerHandSum\n        }\n        dispatch(playHand(play_setState));\n\n\n        if(playerHandSum === 21){ \n            setTimeout(()=>{\n                let cash = state.user.cash + state.user.bet * 2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    enemyHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    enemyHand:[]\n                };\n                dispatch(winGame(win_setState));\n                dispatch(onDeletDib());\n                updateData(cash);\n                alert('У Вас BlackJack!!!!!!!!!!!!!'); \n            }, 600);           \n            \n        }else if(playerHandSum > 21){\n            setTimeout(()=>{\n                let cash = state.user.cash\n                alert('Вы проиграли!!!!!!!');\n                dispatch(onDeletDib());\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    enemyHandSum: 0,\n                    playerHand:[],\n                    enemyHand:[]\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));  \n            }, 600);            \n        } \n    }\n}\n\nexport function handSuccess(set_state){\n    return{\n        type: HAND_SUCCESS,\n        ...set_state\n    }\n}\n\nexport function enoughHand(set_state){\n    return{\n        type: ENOUGH_HAND,\n        ...set_state\n    }\n}\n\nexport function userProfile(setStateUser){\n    return{\n        type: USER_PROFILE,\n        ...setStateUser\n    }\n}\n\nexport function dataUser(setStateUser){\n    return{\n        type: DATA_USER,\n        ...setStateUser\n    }\n}\n\nexport function dealHand(deal_setState){\n    return{\n        type: DEAL_HAND,\n        ...deal_setState\n    }\n}\n\nexport function playHand(play_setState){\n    return{\n        type: PLAY_HAND,\n        ...play_setState\n    }\n}\n\nexport function winGame(win_setState){\n    return{\n        type: WIN_GAME,\n        ...win_setState\n    }\n}\n\nexport function loseGame(lose_setState){\n    return{\n        type: LOSE_GAME,\n        ...lose_setState\n    }\n}\n\nexport function drawGame(draw_setState){\n    return{\n        type: DRAW_GAME,\n        ...draw_setState\n    }\n}\n\nexport function fetchPlayStart(){\n    return{\n        type: FETCH_PLAY_START\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getCard(state){\n    return state.deck[getRandomInt(0, state.deck.length - 1)];\n}\n\nfunction getSum (hand){\n    let sum = 0;\n\n    for( let i=0; i<hand.length; i++){\n        let card = hand[i];\n        if(card.name !== 'Ace'){\n            sum += card.value;\n        }\n    }\n\n    for(let i=0; i<hand.length; i++){\n        let card = hand[i];\n        if(card.name === 'Ace'){\n            if(sum > 10){\n                sum ++;\n            }else{\n                sum += card.value;\n            }\n        }\n    }\n\n    return sum;\n}\n\nexport function onDeletDib() {\n    return{\n        type: DELETE_DIBS\n    }\n}\n\n\nasync function updateData(cash){\n    //const userUpdate = localStorage.getItem('userId');\n    // const dataUpdate ={\n    //     userUpdate, cash\n    // }\n    //await axios.put('http://localhost:3001/playUser', dataUpdate);\n    // if(respons.data){\n    //     const setStateUser = {\n    //         cash: respons.data.bet,\n    //         name: respons.data.name\n    //     }\n    //     dispatch(dataUser(setStateUser));\n    // }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}