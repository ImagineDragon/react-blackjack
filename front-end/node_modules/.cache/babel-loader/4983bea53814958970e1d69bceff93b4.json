{"ast":null,"code":"import _objectSpread from \"D:\\\\C#\\\\blackjack_WebAPI - Copy\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\C#\\\\blackjack_WebAPI - Copy\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\C#\\\\blackjack_WebAPI - Copy\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { FETCH_PLAY_START, FETCH_MAKE_BET, HAND_SUCCESS, WIN_GAME, LOSE_GAME, DRAW_GAME, DEAL_HAND, PLAY_HAND, DATA_USER } from './actionType'; // import socketIOClient from \"socket.io-client\"\n\nimport axios from 'axios';\nexport function fetchMakeBet(bet, cash, isPlay) {\n  return {\n    type: FETCH_MAKE_BET,\n    bet: bet,\n    cash: cash,\n    isPlay: isPlay\n  };\n}\nexport function getDataUser(userId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var data, isPlay, respons, setStateUser;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  userId: userId\n                };\n\n                if (!(localStorage.getItem('cash') == null)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return axios.post('http://localhost:3001/play', data);\n\n              case 4:\n                respons = _context.sent;\n\n                if (respons.data) {\n                  localStorage.setItem('cash', respons.data.bet);\n                  localStorage.setItem('bet', 0);\n                  isPlay = parseInt(localStorage.getItem('bet')) > 0;\n                  localStorage.setItem('name', respons.data.name);\n                }\n\n              case 6:\n                console.log(isPlay);\n                setStateUser = {\n                  bet: parseInt(localStorage.getItem('bet')),\n                  cash: parseInt(localStorage.getItem('cash')),\n                  name: localStorage.getItem('name'),\n                  isPlay: isPlay\n                };\n                dispatch(dataUser(setStateUser));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onPlayHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var state, playerHand, dealerHand, playerHandSum, dealerHandSum, set_state;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = getState().playTable;\n                _context2.next = 3;\n                return [getCard(state), getCard(state)];\n\n              case 3:\n                playerHand = _context2.sent;\n                _context2.next = 6;\n                return [getCard(state)];\n\n              case 6:\n                dealerHand = _context2.sent;\n                _context2.next = 9;\n                return getSum(playerHand);\n\n              case 9:\n                playerHandSum = _context2.sent;\n                _context2.next = 12;\n                return getSum(dealerHand);\n\n              case 12:\n                dealerHandSum = _context2.sent;\n                set_state = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum,\n                  dealerHand: dealerHand,\n                  dealerHandSum: dealerHandSum,\n                  isPlay: false,\n                  isEnough: true,\n                  isMore: true\n                };\n                dispatch(handSuccess(set_state));\n\n                if (playerHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.cash + state.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      dealerHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(winGame(win_setState));\n                    onDeletDib();\n                    alert('У Вас BlackJack!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (playerHandSum > 21) {\n                  setTimeout(function () {\n                    var cash = state.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    onDeletDib();\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      dealerHandSum: 0,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onEnoughHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var state, dealerHand, dealerHandSum, deal_setState_first, deal_setState;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                state = getState().playTable;\n                dealerHand = state.dealerHand;\n                _context3.next = 4;\n                return dealerHand.push(getCard(state));\n\n              case 4:\n                _context3.next = 6;\n                return getSum(dealerHand);\n\n              case 6:\n                dealerHandSum = _context3.sent;\n                deal_setState_first = {\n                  dealerHand: dealerHand,\n                  dealerHandSum: dealerHandSum\n                };\n                _context3.next = 10;\n                return dispatch(dealHand(deal_setState_first));\n\n              case 10:\n                if (!(dealerHandSum < 17)) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                _context3.next = 13;\n                return dealerHand.push(getCard(state));\n\n              case 13:\n                _context3.next = 15;\n                return getSum(dealerHand);\n\n              case 15:\n                dealerHandSum = _context3.sent;\n                deal_setState = {\n                  dealerHand: dealerHand,\n                  dealerHandSum: dealerHandSum\n                };\n                _context3.next = 19;\n                return dispatch(dealHand(deal_setState));\n\n              case 19:\n                _context3.next = 10;\n                break;\n\n              case 21:\n                if (dealerHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.cash;\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      dealerHandSum: 0,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    dispatch(loseGame(lose_setState));\n                    onDeletDib();\n                    updateData(cash);\n                    alert('У дилера BlackJack! Вы проиграли(((((');\n                  }, 600);\n                } else if (dealerHandSum > 21 || state.playerHandSum > dealerHandSum) {\n                  setTimeout(function () {\n                    var cash = state.cash + state.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      dealerHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    dispatch(winGame(win_setState));\n                    onDeletDib();\n                    updateData(cash);\n                    alert('Вы выграли!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (dealerHandSum === state.playerHandSum) {\n                  setTimeout(function () {\n                    var cash = state.cash + state.bet;\n                    var draw_setState = {\n                      playerHandSum: 0,\n                      dealerHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    dispatch(drawGame(draw_setState));\n                    onDeletDib();\n                    updateData(cash);\n                    alert('Победила дружба!!!!!!!!!!!!!');\n                  }, 600);\n                } else {\n                  setTimeout(function () {\n                    var cash = state.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    onDeletDib();\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      dealerHandSum: 0,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onMoreHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n        var state, playerHand, playerHandSum, play_setState;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                state = getState().playTable;\n                playerHand = state.playerHand;\n                playerHand.push(getCard(state));\n                _context4.next = 5;\n                return getSum(playerHand);\n\n              case 5:\n                playerHandSum = _context4.sent;\n                play_setState = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum\n                };\n                dispatch(playHand(play_setState));\n\n                if (playerHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.cash + state.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      dealerHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    dispatch(winGame(win_setState));\n                    onDeletDib();\n                    updateData(cash);\n                    alert('У Вас BlackJack!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (playerHandSum > 21) {\n                  setTimeout(function () {\n                    var cash = state.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    onDeletDib();\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      dealerHandSum: 0,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x6, _x7) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function handSuccess(set_state) {\n  return _objectSpread({\n    type: HAND_SUCCESS\n  }, set_state);\n}\nexport function dataUser(setStateUser) {\n  return _objectSpread({\n    type: DATA_USER\n  }, setStateUser);\n}\nexport function dealHand(deal_setState) {\n  return _objectSpread({\n    type: DEAL_HAND\n  }, deal_setState);\n}\nexport function playHand(play_setState) {\n  return _objectSpread({\n    type: PLAY_HAND\n  }, play_setState);\n}\nexport function winGame(win_setState) {\n  return _objectSpread({\n    type: WIN_GAME\n  }, win_setState);\n}\nexport function loseGame(lose_setState) {\n  return _objectSpread({\n    type: LOSE_GAME\n  }, lose_setState);\n}\nexport function drawGame(draw_setState) {\n  return _objectSpread({\n    type: DRAW_GAME\n  }, draw_setState);\n}\nexport function fetchPlayStart() {\n  return {\n    type: FETCH_PLAY_START\n  };\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getCard(state) {\n  return state.deck[getRandomInt(0, state.deck.length - 1)];\n}\n\nfunction getSum(hand) {\n  var sum = 0;\n\n  for (var i = 0; i < hand.length; i++) {\n    var card = hand[i];\n\n    if (card.name !== 'Ace') {\n      sum += card.value;\n    }\n  }\n\n  for (var _i = 0; _i < hand.length; _i++) {\n    var _card = hand[_i];\n\n    if (_card.name === 'Ace') {\n      if (sum > 10) {\n        sum++;\n      } else {\n        sum += _card.value;\n      }\n    }\n  }\n\n  return sum;\n}\n\nfunction onDeletDib() {\n  return document.getElementById('dibsBet').innerHTML = '';\n}\n\nfunction updateData(_x8) {\n  return _updateData.apply(this, arguments);\n}\n\nfunction _updateData() {\n  _updateData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(cash) {\n    var userUpdate, dataUpdate;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            localStorage.setItem('cash', cash);\n            localStorage.setItem('bet', 0);\n            localStorage.removeItem('dibsBet');\n            userUpdate = localStorage.getItem('userId');\n            dataUpdate = {\n              userUpdate: userUpdate,\n              cash: cash //await axios.put('http://localhost:3001/playUser', dataUpdate);\n              // if(respons.data){\n              //     const setStateUser = {\n              //         cash: respons.data.bet,\n              //         name: respons.data.name\n              //     }\n              //     dispatch(dataUser(setStateUser));\n              // }\n\n            };\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this);\n  }));\n  return _updateData.apply(this, arguments);\n}","map":{"version":3,"sources":["D:\\C#\\blackjack_WebAPI - Copy\\front-end\\src\\store\\actions\\playTable.js"],"names":["FETCH_PLAY_START","FETCH_MAKE_BET","HAND_SUCCESS","WIN_GAME","LOSE_GAME","DRAW_GAME","DEAL_HAND","PLAY_HAND","DATA_USER","axios","fetchMakeBet","bet","cash","isPlay","type","getDataUser","userId","dispatch","data","localStorage","getItem","post","respons","setItem","parseInt","name","console","log","setStateUser","dataUser","onPlayHandler","getState","state","playTable","getCard","playerHand","dealerHand","getSum","playerHandSum","dealerHandSum","set_state","isEnough","isMore","handSuccess","setTimeout","win_setState","updateData","winGame","onDeletDib","alert","lose_setState","loseGame","onEnoughHandler","push","deal_setState_first","dealHand","deal_setState","draw_setState","drawGame","onMoreHandler","play_setState","playHand","fetchPlayStart","getRandomInt","min","max","Math","floor","random","deck","length","hand","sum","i","card","value","document","getElementById","innerHTML","removeItem","userUpdate","dataUpdate"],"mappings":"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","sourcesContent":["import {FETCH_PLAY_START,\n        FETCH_MAKE_BET,\n        HAND_SUCCESS,\n        WIN_GAME,\n        LOSE_GAME,\n        DRAW_GAME,\n        DEAL_HAND,\n        PLAY_HAND,\n        DATA_USER} from './actionType'\n// import socketIOClient from \"socket.io-client\"\nimport axios from 'axios'\n\n\nexport function fetchMakeBet(bet, cash, isPlay){\n    return {\n        type: FETCH_MAKE_BET,\n        bet, cash, isPlay\n    }\n}\n\nexport function getDataUser(userId){\n    return async dispatch =>{\n        const data = {\n            userId: userId  \n        }\n        let isPlay;\n        if(localStorage.getItem('cash') == null){\n            const respons = await axios.post('http://localhost:3001/play', data);\n            if(respons.data){                \n                localStorage.setItem('cash', respons.data.bet);\n                localStorage.setItem('bet', 0);\n                isPlay = parseInt(localStorage.getItem('bet')) > 0;\n                localStorage.setItem('name', respons.data.name);\n            }\n        }\n        console.log(isPlay);\n        const setStateUser = {\n            bet: parseInt(localStorage.getItem('bet')),\n            cash: parseInt(localStorage.getItem('cash')),\n            name: localStorage.getItem('name'),\n            isPlay: isPlay\n        }\n        dispatch(dataUser(setStateUser));\n    }\n       \n}\n\nexport function onPlayHandler (){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        let playerHand = await [getCard(state), getCard(state)];\n        let dealerHand = await [getCard(state)];\n        let playerHandSum = await getSum(playerHand);\n        let dealerHandSum = await getSum(dealerHand);\n\n        const set_state = {\n            playerHand,\n            playerHandSum,\n            dealerHand,\n            dealerHandSum,\n            isPlay: false,\n            isEnough: true,\n            isMore: true\n        };\n\n        dispatch(handSuccess(set_state));\n\n        if(playerHandSum === 21){ \n            setTimeout(()=>{\n                let cash = state.cash + state.bet*2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    dealerHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(winGame(win_setState)); \n                onDeletDib();  \n                alert('У Вас BlackJack!!!!!!!!!!!!!'); \n            }, 600);           \n            \n        }else if(playerHandSum > 21){\n            setTimeout(()=>{\n                let cash = state.cash;\n                alert('Вы проиграли!!!!!!!');\n                onDeletDib();\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    dealerHandSum: 0,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));  \n            }, 600);\n            \n        }   \n    }    \n}\n\nexport function onEnoughHandler(){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        let dealerHand = state.dealerHand;\n        await dealerHand.push(getCard(state));\n        let dealerHandSum = await getSum(dealerHand);\n        const deal_setState_first = {\n            dealerHand,\n            dealerHandSum\n        }\n        await dispatch(dealHand(deal_setState_first));\n        \n        while(dealerHandSum < 17){\n            await dealerHand.push(getCard(state));\n            dealerHandSum = await getSum(dealerHand);\n            const deal_setState = {\n                dealerHand,\n                dealerHandSum\n            }\n            await dispatch(dealHand(deal_setState));\n        }\n\n        if(dealerHandSum === 21){\n            setTimeout(()=>{\n                let cash = state.cash;\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    dealerHandSum: 0,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                }; \n                dispatch(loseGame(lose_setState));\n                onDeletDib(); \n                updateData(cash); \n                alert('У дилера BlackJack! Вы проиграли((((('); \n            }, 600); \n        }else if(dealerHandSum > 21 || state.playerHandSum > dealerHandSum){\n            setTimeout(()=>{\n                let cash = state.cash + state.bet*2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    dealerHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                }; \n                dispatch(winGame(win_setState));\n                onDeletDib();  \n                updateData(cash);\n                alert('Вы выграли!!!!!!!!!!!!!'); \n            }, 600);        \n        }else if(dealerHandSum === state.playerHandSum){\n            setTimeout(()=>{\n                let cash = state.cash + state.bet;\n                const draw_setState = {\n                    playerHandSum: 0,\n                    dealerHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                }; \n                dispatch(drawGame(draw_setState));\n                onDeletDib();  \n                updateData(cash);\n                alert('Победила дружба!!!!!!!!!!!!!'); \n            }, 600); \n        }else{\n            setTimeout(()=>{\n                let cash = state.cash;\n                alert('Вы проиграли!!!!!!!');\n                onDeletDib();\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    dealerHandSum: 0,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));\n            }, 600);\n        }\n        \n    }\n}\n\nexport function onMoreHandler(){\n    return async (dispatch, getState) =>{\n        const state = getState().playTable;\n        let playerHand = state.playerHand;\n        playerHand.push(getCard(state));\n        let playerHandSum = await getSum(playerHand);\n        const play_setState = {\n            playerHand,\n            playerHandSum\n        }\n\n        dispatch(playHand(play_setState));\n\n\n        if(playerHandSum === 21){ \n            setTimeout(()=>{\n                let cash = state.cash + state.bet*2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    dealerHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                dispatch(winGame(win_setState));\n                onDeletDib();  \n                updateData(cash);\n                alert('У Вас BlackJack!!!!!!!!!!!!!'); \n            }, 600);           \n            \n        }else if(playerHandSum > 21){\n            setTimeout(()=>{\n                let cash = state.cash\n                alert('Вы проиграли!!!!!!!');\n                onDeletDib();\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    dealerHandSum: 0,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));  \n            }, 600);\n            \n        } \n    }\n}\n\nexport function handSuccess(set_state){\n    return{\n        type: HAND_SUCCESS,\n        ...set_state\n    }\n}\n\nexport function dataUser(setStateUser){\n    return{\n        type: DATA_USER,\n        ...setStateUser\n    }\n}\n\nexport function dealHand(deal_setState){\n    return{\n        type: DEAL_HAND,\n        ...deal_setState\n    }\n}\n\nexport function playHand(play_setState){\n    return{\n        type: PLAY_HAND,\n        ...play_setState\n    }\n}\n\nexport function winGame(win_setState){\n    return{\n        type: WIN_GAME,\n        ...win_setState\n    }\n}\n\nexport function loseGame(lose_setState){\n    return{\n        type: LOSE_GAME,\n        ...lose_setState\n    }\n}\n\nexport function drawGame(draw_setState){\n    return{\n        type: DRAW_GAME,\n        ...draw_setState\n    }\n}\n\nexport function fetchPlayStart(){\n    return{\n        type: FETCH_PLAY_START\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random()*(max-min+1)+min);\n}\n\nfunction getCard(state){\n    return state.deck[getRandomInt(0, state.deck.length - 1)];\n}\n\nfunction getSum (hand){\n    let sum = 0;\n\n    for( let i=0; i<hand.length; i++){\n        let card = hand[i];\n        if(card.name !== 'Ace'){\n            sum += card.value;\n        }\n    }\n\n    for(let i=0; i<hand.length; i++){\n        let card = hand[i];\n        if(card.name === 'Ace'){\n            if(sum > 10){\n                sum ++;\n            }else{\n                sum += card.value;\n            }\n        }\n    }\n\n    return sum;\n}\n\nfunction onDeletDib() {\n    return document.getElementById('dibsBet').innerHTML='';\n}\n\n\nasync function updateData(cash){\n    localStorage.setItem('cash', cash);\n    localStorage.setItem('bet', 0);\n    localStorage.removeItem('dibsBet');\n    const userUpdate = localStorage.getItem('userId');\n    const dataUpdate ={\n        userUpdate, cash\n    }\n    //await axios.put('http://localhost:3001/playUser', dataUpdate);\n    // if(respons.data){\n    //     const setStateUser = {\n    //         cash: respons.data.bet,\n    //         name: respons.data.name\n    //     }\n    //     dispatch(dataUser(setStateUser));\n    // }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}