{"ast":null,"code":"/**\n* jQuery core object.\n*\n* Worker with jQuery deferred\n*\n* Code from: https://github.com/jquery/jquery/blob/master/src/core.js\n*\n*/\nvar jQuery = module.exports = {\n  type: type,\n  isArray: isArray,\n  isFunction: isFunction,\n  isPlainObject: isPlainObject,\n  each: each,\n  extend: extend,\n  noop: function noop() {}\n};\nvar toString = Object.prototype.toString;\nvar class2type = {}; // Populate the class2type map\n\n\"Boolean Number String Function Array Date RegExp Object\".split(\" \").forEach(function (name) {\n  class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n});\n\nfunction type(obj) {\n  return obj == null ? String(obj) : class2type[toString.call(obj)] || \"object\";\n}\n\nfunction isFunction(obj) {\n  return jQuery.type(obj) === \"function\";\n}\n\nfunction isArray(obj) {\n  return jQuery.type(obj) === \"array\";\n}\n\nfunction each(object, callback, args) {\n  var name,\n      i = 0,\n      length = object.length,\n      isObj = length === undefined || isFunction(object);\n\n  if (args) {\n    if (isObj) {\n      for (name in object) {\n        if (callback.apply(object[name], args) === false) {\n          break;\n        }\n      }\n    } else {\n      for (; i < length;) {\n        if (callback.apply(object[i++], args) === false) {\n          break;\n        }\n      }\n    } // A special, fast, case for the most common use of each\n\n  } else {\n    if (isObj) {\n      for (name in object) {\n        if (callback.call(object[name], name, object[name]) === false) {\n          break;\n        }\n      }\n    } else {\n      for (; i < length;) {\n        if (callback.call(object[i], i, object[i++]) === false) {\n          break;\n        }\n      }\n    }\n  }\n\n  return object;\n}\n\nfunction isPlainObject(obj) {\n  // Must be an Object.\n  if (!obj || jQuery.type(obj) !== \"object\") {\n    return false;\n  }\n\n  return true;\n}\n\nfunction extend() {\n  var options,\n      name,\n      src,\n      copy,\n      copyIsArray,\n      clone,\n      target = arguments[0] || {},\n      i = 1,\n      length = arguments.length,\n      deep = false; // Handle a deep copy situation\n\n  if (typeof target === \"boolean\") {\n    deep = target;\n    target = arguments[1] || {}; // skip the boolean and the target\n\n    i = 2;\n  } // Handle case when target is a string or something (possible in deep copy)\n\n\n  if (typeof target !== \"object\" && !jQuery.isFunction(target)) {\n    target = {};\n  } // extend jQuery itself if only one argument is passed\n\n\n  if (length === i) {\n    target = this;\n    --i;\n  }\n\n  for (; i < length; i++) {\n    // Only deal with non-null/undefined values\n    if ((options = arguments[i]) != null) {\n      // Extend the base object\n      for (name in options) {\n        src = target[name];\n        copy = options[name]; // Prevent never-ending loop\n\n        if (target === copy) {\n          continue;\n        } // Recurse if we're merging plain objects or arrays\n\n\n        if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n          if (copyIsArray) {\n            copyIsArray = false;\n            clone = src && jQuery.isArray(src) ? src : [];\n          } else {\n            clone = src && jQuery.isPlainObject(src) ? src : {};\n          } // Never move original objects, clone them\n\n\n          target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values\n        } else if (copy !== undefined) {\n          target[name] = copy;\n        }\n      }\n    }\n  } // Return the modified object\n\n\n  return target;\n}\n\n;","map":null,"metadata":{},"sourceType":"script"}