{"ast":null,"code":"'use strict';\n\nvar jQueryDeferred = require('jquery-deferred');\n\nvar jQueryParam = require('jquery-param');\n\nvar jqueryFunction = function jqueryFunction(subject) {\n  var events = subject.events || {};\n  if (subject && subject === subject.window) return {\n    0: subject,\n    load: function load(handler) {\n      return subject.addEventListener('load', handler, false);\n    },\n    bind: function bind(event, handler) {\n      return subject.addEventListener(event, handler, false);\n    },\n    unbind: function unbind(event, handler) {\n      return subject.removeEventListener(event, handler, false);\n    }\n  };\n  return {\n    0: subject,\n    unbind: function unbind(event, handler) {\n      var handlers = events[event] || [];\n\n      if (handler) {\n        var idx = handlers.indexOf(handler);\n        if (idx !== -1) handlers.splice(idx, 1);\n      } else handlers = [];\n\n      events[event] = handlers;\n      subject.events = events;\n    },\n    bind: function bind(event, handler) {\n      var current = events[event] || [];\n      events[event] = current.concat(handler);\n      subject.events = events;\n    },\n    triggerHandler: function triggerHandler(event, args) {\n      var _this = this;\n\n      var handlers = events[event] || [];\n      handlers.forEach(function (fn) {\n        if (args && args[0] && args[0].type === undefined) {\n          args = [{\n            type: event\n          }].concat(args || []);\n        } else {\n          args = args || [];\n        }\n\n        fn.apply(_this, args);\n      });\n    }\n  };\n};\n\nvar xhr = function xhr() {\n  try {\n    return new window.XMLHttpRequest();\n  } catch (e) {}\n};\n\nvar ajax = function ajax(options) {\n  var request = xhr();\n\n  request.onreadystatechange = function () {\n    if (request.readyState !== 4) {\n      return;\n    }\n\n    if (request.status === 200 && !request._hasError) {\n      options.success && options.success(JSON.parse(request.responseText));\n    } else {\n      options.error && options.error(request);\n    }\n  };\n\n  request.open(options.type, options.url);\n  request.setRequestHeader('content-type', options.contentType);\n  request.send(options.data.data && 'data=' + options.data.data);\n  return {\n    abort: function abort(reason) {\n      return request.abort(reason);\n    }\n  };\n};\n\nmodule.exports = jQueryDeferred.extend(jqueryFunction, jQueryDeferred, {\n  defaultAjaxHeaders: null,\n  ajax: ajax,\n  inArray: function inArray(arr, item) {\n    return arr.indexOf(item) !== -1;\n  },\n  trim: function trim(str) {\n    return str && str.trim();\n  },\n  isEmptyObject: function isEmptyObject(obj) {\n    return !obj || Object.keys(obj).length === 0;\n  },\n  makeArray: function makeArray(arr) {\n    return [].slice.call(arr, 0);\n  },\n  param: function param(obj) {\n    return jQueryParam(obj);\n  },\n  support: {\n    cors: function () {\n      var xhrObj = xhr();\n      return !!xhrObj && \"withCredentials\" in xhrObj;\n    }()\n  }\n});","map":null,"metadata":{},"sourceType":"script"}