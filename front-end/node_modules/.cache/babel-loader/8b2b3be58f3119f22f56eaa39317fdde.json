{"ast":null,"code":"import _classCallCheck from \"D:\\\\C#\\\\react-blackjack\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\C#\\\\react-blackjack\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\C#\\\\react-blackjack\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\C#\\\\react-blackjack\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\C#\\\\react-blackjack\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Component } from 'react';\nimport { history } from '../store/history';\nimport { hubConnection } from 'signalr-no-jquery';\nimport { connect } from 'react-redux';\nimport { scrollDown } from '../components/UI/Chat/Chat';\nimport { onGameStart as _onGameStart, onBet as _onBet, onEnemyBet as _onEnemyBet, onMessage as _onMessage, onTimer as _onTimer, setActivePlayer as _setActivePlayer, onPlayWithUserHandler as _onPlayWithUserHandler, enemyDibsBet as _enemyDibsBet, enemyGetCard as _enemyGetCard, gameResult as _gameResult, gameEnd as _gameEnd } from '../store/actions/playTable';\nexport var connection = hubConnection('http://localhost:3001'),\n    playHubProxy = connection.createHubProxy('playHub');\n\nvar PlayConnection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlayConnection, _Component);\n\n  function PlayConnection() {\n    _classCallCheck(this, PlayConnection);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlayConnection).apply(this, arguments));\n  }\n\n  _createClass(PlayConnection, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var userId = parseInt(localStorage.getItem('userId'));\n      var enemyId = parseInt(localStorage.getItem('enemyId'));\n      playHubProxy.on('onGameStart', function (user, enemy, messages) {\n        this.props.onGameStart(user, enemy, messages);\n        scrollDown();\n      }.bind(this));\n      playHubProxy.on('onEnemyBet', function (enemy, dibsBet) {\n        this.props.enemyDibsBet(dibsBet);\n        this.props.onEnemyBet(enemy);\n      }.bind(this));\n      playHubProxy.on('onBet', function (user) {\n        this.props.onBet(user);\n      }.bind(this));\n      playHubProxy.on('onStopGame', function () {\n        history.push('/profile');\n      });\n      playHubProxy.on('onMessage', function (message) {\n        this.props.onMessage(message);\n        scrollDown();\n      }.bind(this));\n      playHubProxy.on('onPlayOffer', function (isBet) {\n        this.props.setActivePlayer(userId, isBet);\n\n        if (this.props.user.enoughCards) {\n          playHubProxy.invoke('gameResult');\n        } else {\n          if (!isBet && this.props.user.playerHandSum === 0) {\n            this.props.onPlayWithUserHandler();\n          }\n        }\n      }.bind(this));\n      playHubProxy.on('onTimer', function (time) {\n        this.props.onTimer(time);\n      }.bind(this));\n      playHubProxy.on('onEnemyGetCard', function () {\n        this.props.enemyGetCard();\n      }.bind(this));\n      playHubProxy.on('onGameResult', function (enemyHand, enemyHandSum) {\n        this.props.gameResult(enemyHand, enemyHandSum);\n      }.bind(this));\n      playHubProxy.on('onGameEnd', function (winnerId) {\n        this.props.gameEnd(winnerId); //history.push('/profile');\n      }.bind(this));\n\n      if (enemyId !== -1) {\n        connection.start().done(function () {\n          console.log('start game');\n          playHubProxy.invoke('gameStart', userId);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      playHubProxy.off('onGameStart');\n      playHubProxy.off('onEnemyBet');\n      playHubProxy.off('onBet');\n      playHubProxy.off('onStopGame');\n      playHubProxy.off('onMessage');\n      playHubProxy.off('onPlayOffer');\n      playHubProxy.off('onTimer');\n      playHubProxy.off('onEnemyGetCard');\n      playHubProxy.off('onGameResult');\n      playHubProxy.off('onGameEnd');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return PlayConnection;\n}(Component);\n\nfunction mapStateToProps(state) {\n  var user = state.playTable.user;\n  return {\n    user: user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onGameStart: function onGameStart(user, enemy, messages) {\n      return dispatch(_onGameStart(user, enemy, messages));\n    },\n    onMessage: function onMessage(message) {\n      return dispatch(_onMessage(message));\n    },\n    setActivePlayer: function setActivePlayer(id, isBet) {\n      return dispatch(_setActivePlayer(id, isBet));\n    },\n    onPlayWithUserHandler: function onPlayWithUserHandler() {\n      return dispatch(_onPlayWithUserHandler());\n    },\n    onBet: function onBet(user) {\n      return dispatch(_onBet(user));\n    },\n    onEnemyBet: function onEnemyBet(enemy) {\n      return dispatch(_onEnemyBet(enemy));\n    },\n    enemyDibsBet: function enemyDibsBet(value) {\n      return dispatch(_enemyDibsBet(value));\n    },\n    onTimer: function onTimer(time) {\n      return dispatch(_onTimer(time));\n    },\n    enemyGetCard: function enemyGetCard() {\n      return dispatch(_enemyGetCard());\n    },\n    gameResult: function gameResult(enemyHand, enemyHandSum) {\n      return dispatch(_gameResult(enemyHand, enemyHandSum));\n    },\n    gameEnd: function gameEnd(winnerId) {\n      return dispatch(_gameEnd(winnerId));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayConnection);","map":{"version":3,"sources":["D:\\C#\\react-blackjack\\front-end\\src\\Hubs\\PlayTableHub.js"],"names":["Component","history","hubConnection","connect","scrollDown","onGameStart","onBet","onEnemyBet","onMessage","onTimer","setActivePlayer","onPlayWithUserHandler","enemyDibsBet","enemyGetCard","gameResult","gameEnd","connection","playHubProxy","createHubProxy","PlayConnection","userId","parseInt","localStorage","getItem","enemyId","on","user","enemy","messages","props","bind","dibsBet","push","message","isBet","enoughCards","invoke","playerHandSum","time","enemyHand","enemyHandSum","winnerId","start","done","console","log","off","mapStateToProps","state","playTable","mapDispatchToProps","dispatch","id","value"],"mappings":"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","sourcesContent":["import { Component } from 'react'\r\n\r\nimport { history } from '../store/history'\r\n\r\nimport { hubConnection } from 'signalr-no-jquery';\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { scrollDown } from '../components/UI/Chat/Chat'\r\n\r\nimport { onGameStart,\r\n        onBet,\r\n        onEnemyBet,\r\n        onMessage,\r\n        onTimer,\r\n        setActivePlayer,\r\n        onPlayWithUserHandler,\r\n        enemyDibsBet,\r\n        enemyGetCard,\r\n        gameResult,\r\n        gameEnd } from '../store/actions/playTable'\r\n\r\nexport const connection = hubConnection('http://localhost:3001'), playHubProxy = connection.createHubProxy('playHub');\r\n\r\nclass PlayConnection extends Component{\r\n    componentDidMount(){\r\n        const userId = parseInt(localStorage.getItem('userId'));\r\n        const enemyId = parseInt(localStorage.getItem('enemyId'));\r\n\r\n        playHubProxy.on('onGameStart', function(user, enemy, messages){\r\n            this.props.onGameStart(user, enemy, messages);\r\n            scrollDown();\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onEnemyBet', function(enemy, dibsBet){\r\n            this.props.enemyDibsBet(dibsBet);\r\n            this.props.onEnemyBet(enemy);\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onBet', function(user){                  \r\n            this.props.onBet(user);\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onStopGame', function(){\r\n            history.push('/profile');\r\n        });\r\n\r\n        playHubProxy.on('onMessage', function(message){\r\n            this.props.onMessage(message);\r\n            scrollDown();\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onPlayOffer', function(isBet){\r\n            this.props.setActivePlayer(userId, isBet);\r\n            if(this.props.user.enoughCards){\r\n                playHubProxy.invoke('gameResult');\r\n            } else {\r\n                if(!isBet && this.props.user.playerHandSum === 0) {\r\n                    this.props.onPlayWithUserHandler();\r\n                }\r\n            }\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onTimer', function(time){\r\n            this.props.onTimer(time);\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onEnemyGetCard', function(){\r\n            this.props.enemyGetCard();\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onGameResult', function(enemyHand, enemyHandSum){\r\n            this.props.gameResult(enemyHand, enemyHandSum);\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onGameEnd', function(winnerId){\r\n            this.props.gameEnd(winnerId);            \r\n            //history.push('/profile');\r\n        }.bind(this));\r\n\r\n        if(enemyId !== -1){\r\n            connection.start().done(function(){\r\n                console.log('start game');\r\n                playHubProxy.invoke('gameStart', userId);\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        playHubProxy.off('onGameStart');\r\n        playHubProxy.off('onEnemyBet');\r\n        playHubProxy.off('onBet');\r\n        playHubProxy.off('onStopGame');\r\n        playHubProxy.off('onMessage');\r\n        playHubProxy.off('onPlayOffer');\r\n        playHubProxy.off('onTimer');\r\n        playHubProxy.off('onEnemyGetCard');\r\n        playHubProxy.off('onGameResult');\r\n        playHubProxy.off('onGameEnd');\r\n    }\r\n\r\n    render(){\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    const { user } = state.playTable;\r\n    return {\r\n        user\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return{\r\n        onGameStart: (user, enemy, messages) => dispatch(onGameStart(user, enemy, messages)),\r\n        onMessage: (message) => dispatch(onMessage(message)),\r\n        setActivePlayer: (id, isBet) => dispatch(setActivePlayer(id, isBet)),\r\n        onPlayWithUserHandler: () => dispatch(onPlayWithUserHandler()),\r\n        onBet: (user) => dispatch(onBet(user)),\r\n        onEnemyBet: (enemy) => dispatch(onEnemyBet(enemy)),\r\n        enemyDibsBet: (value) => dispatch(enemyDibsBet(value)),\r\n        onTimer: (time) => dispatch(onTimer(time)),\r\n        enemyGetCard: () => dispatch(enemyGetCard()),\r\n        gameResult: (enemyHand, enemyHandSum) => dispatch(gameResult(enemyHand, enemyHandSum)),\r\n        gameEnd: (winnerId) => dispatch(gameEnd(winnerId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayConnection)"]},"metadata":{},"sourceType":"module"}