{"ast":null,"code":"import _classCallCheck from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport React, { Component } from 'react';\nimport { hubConnection } from 'signalr-no-jquery';\nimport { connect } from 'react-redux';\nimport { getUserProfile as _getUserProfile, onConnected as _onConnected, onNewUserConnected as _onNewUserConnected, onUserDisconnected as _onUserDisconnected, onUserReady as _onUserReady } from '../store/actions/playTable';\nexport var connection = hubConnection('http://localhost:3001'),\n    playHubProxy = connection.createHubProxy('playHub');\nexport var StartConnection =\n/*#__PURE__*/\nfunction () {\n  function StartConnection() {\n    _classCallCheck(this, StartConnection);\n  }\n\n  _createClass(StartConnection, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var userId = localStorage.getItem('userId');\n\n      if (connection.state === 4) {\n        connection.start().done(function () {\n          playHubProxy.invoke('connect', userId);\n          console.log(userId);\n        });\n      }\n\n      playHubProxy.on('onConnected', function (profiles) {\n        console.log('Connected');\n        this.props.onConnected(profiles);\n      });\n      playHubProxy.on('onNewUserConnected', function (newUser) {\n        console.log('New user');\n        var users = this.props.users;\n        var index = users.indexOf(newUser);\n\n        if (index == -1) {\n          this.props.onNewUserConnected(newUser);\n        }\n      });\n      playHubProxy.on('onUserDisconnected', function (profile) {\n        if (connection != null) {\n          console.log('User disconnected');\n          this.props.onUserDisconnected(profile);\n        }\n      });\n      playHubProxy.on('onUserReady', function (profile) {\n        this.props.onUserReady(profile);\n      });\n      playHubProxy.on('onGameAccept', function (profile) {\n        localStorage.setItem('enemyId', profile.id);\n        this.readyState(); //connection.stop();\n\n        this.props.history.push('/play');\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      playHubProxy.off('onConnected');\n      playHubProxy.off('onNewUserConnected');\n      playHubProxy.off('onUserDisconnected');\n      playHubProxy.off('onUserReady');\n      playHubProxy.off('onGameAccept');\n      connection.stop();\n    }\n  }]);\n\n  return StartConnection;\n}();\n\nfunction mapStateToProps(state) {\n  var _state$playTable = state.playTable,\n      count = _state$playTable.count,\n      users = _state$playTable.users,\n      user = _state$playTable.user;\n  return {\n    count: count,\n    users: users,\n    user: user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getUserProfile: function getUserProfile(userId) {\n      return dispatch(_getUserProfile(userId));\n    },\n    onConnected: function onConnected(profiles) {\n      return dispatch(_onConnected(profiles));\n    },\n    onNewUserConnected: function onNewUserConnected(newUser) {\n      return dispatch(_onNewUserConnected(newUser));\n    },\n    onUserDisconnected: function onUserDisconnected(profile) {\n      return dispatch(_onUserDisconnected(profile));\n    },\n    onUserReady: function onUserReady(profile) {\n      return dispatch(_onUserReady(profile));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartConnection);","map":{"version":3,"sources":["D:\\C#\\blackjack_WebAPI - new\\front-end\\src\\Hubs\\Hubs.js"],"names":["React","Component","hubConnection","connect","getUserProfile","onConnected","onNewUserConnected","onUserDisconnected","onUserReady","connection","playHubProxy","createHubProxy","StartConnection","userId","localStorage","getItem","state","start","done","invoke","console","log","on","profiles","props","newUser","users","index","indexOf","profile","setItem","id","readyState","history","push","off","stop","mapStateToProps","playTable","count","user","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\n\r\nimport { hubConnection } from 'signalr-no-jquery';\r\n\r\nimport {connect} from 'react-redux'\r\n\r\nimport {getUserProfile,\r\n    onConnected,\r\n    onNewUserConnected,\r\n    onUserDisconnected,\r\n    onUserReady} from '../store/actions/playTable'\r\n\r\nexport const connection = hubConnection('http://localhost:3001'), playHubProxy = connection.createHubProxy('playHub');\r\n\r\nexport class StartConnection{\r\n    componentDidMount(){\r\n        const userId = localStorage.getItem('userId');\r\n        if(connection.state === 4){\r\n            connection.start().done(function(){\r\n                playHubProxy.invoke('connect', userId);\r\n                console.log(userId);\r\n            });\r\n        }\r\n\r\n        playHubProxy.on('onConnected', function(profiles){\r\n            console.log('Connected');\r\n            this.props.onConnected(profiles);\r\n        });\r\n\r\n        playHubProxy.on('onNewUserConnected', function(newUser){\r\n            console.log('New user')\r\n            var users = this.props.users;\r\n            var index = users.indexOf(newUser);\r\n            if(index == -1){\r\n                this.props.onNewUserConnected(newUser);\r\n            }\r\n        });\r\n\r\n        playHubProxy.on('onUserDisconnected', function(profile){\r\n            if(connection != null){\r\n                console.log('User disconnected')\r\n                this.props.onUserDisconnected(profile);\r\n            }\r\n        });\r\n\r\n        playHubProxy.on('onUserReady', function(profile){\r\n            this.props.onUserReady(profile);\r\n        });\r\n\r\n        playHubProxy.on('onGameAccept', function(profile){\r\n            localStorage.setItem('enemyId', profile.id);\r\n            this.readyState();\r\n            //connection.stop();\r\n            this.props.history.push('/play');\r\n        });\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        playHubProxy.off('onConnected');\r\n        playHubProxy.off('onNewUserConnected');\r\n        playHubProxy.off('onUserDisconnected');\r\n        playHubProxy.off('onUserReady');\r\n        playHubProxy.off('onGameAccept');\r\n        connection.stop();\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    const { count, users, user } = state.playTable;\r\n    return {\r\n        count, users, user\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return{\r\n        getUserProfile: (userId) => dispatch(getUserProfile(userId)),\r\n        onConnected: (profiles) => dispatch(onConnected(profiles)),\r\n        onNewUserConnected: (newUser) =>dispatch(onNewUserConnected(newUser)),\r\n        onUserDisconnected: (profile) =>dispatch(onUserDisconnected(profile)),\r\n        onUserReady: (profile) =>dispatch(onUserReady(profile))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StartConnection)"]},"metadata":{},"sourceType":"module"}