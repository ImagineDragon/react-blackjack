{"ast":null,"code":"import _classCallCheck from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Component } from 'react';\nimport { history } from '../store/history';\nimport { hubConnection } from 'signalr-no-jquery';\nimport { connect } from 'react-redux';\nimport { scrollDown } from '../components/UI/Chat/Chat';\nimport { onGameStart as _onGameStart, onBet as _onBet, onEnemyBet as _onEnemyBet, onMessage as _onMessage, onTimer as _onTimer, setActivePlayer as _setActivePlayer } from '../store/actions/playTable';\nexport var connection = hubConnection('http://localhost:3001'),\n    playHubProxy = connection.createHubProxy('playHub');\n\nvar PlayConnection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlayConnection, _Component);\n\n  function PlayConnection() {\n    _classCallCheck(this, PlayConnection);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlayConnection).apply(this, arguments));\n  }\n\n  _createClass(PlayConnection, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var userId = parseInt(localStorage.getItem('userId'));\n      var enemyId = parseInt(localStorage.getItem('enemyId'));\n      playHubProxy.on('onGameStart', function (user, enemy, messages) {\n        this.props.onGameStart(user, enemy, messages); // if(this.props.user.activePlayerId === userId){\n        //     playHubProxy.invoke('playOffer', userId);\n        // }\n\n        scrollDown();\n      }.bind(this));\n      playHubProxy.on('onEnemyBet', function (enemy, dibsBet) {\n        var tmp = document.createElement('div');\n        tmp.innerHTML = dibsBet;\n        document.getElementById('enemyDibsBet').appendChild(tmp);\n        this.props.onEnemyBet(enemy);\n      }.bind(this));\n      playHubProxy.on('onBet', function (user) {\n        this.props.onBet(user);\n      }.bind(this));\n      playHubProxy.on('onStopGame', function () {\n        history.push('/profile');\n      });\n      playHubProxy.on('onMessage', function (message) {\n        this.props.onMessage(message);\n        scrollDown();\n      }.bind(this));\n      playHubProxy.on('onPlayOffer', function (enemyId) {\n        console.log('onPlayOffer');\n        this.props.setActivePlayer(userId);\n\n        if (this.props.user.bet === this.props.user.enemyBet && this.props.user.bet > 0 && this.props.user.firstBet) {\n          this.setState({\n            isBet: false,\n            firstBet: false,\n            enableBet: false\n          });\n          this.props.onPlayWithUserHandler();\n        } else if (enemyId === parseInt(localStorage.getItem('userId'))) {\n          this.setState({\n            enableBet: false,\n            isRaise: false,\n            isCheck: false,\n            isFold: false\n          });\n        } else {\n          this.setState({\n            enableBet: true,\n            isFold: true,\n            isCheck: this.props.user.enemyBet > 0\n          });\n        }\n      }.bind(this));\n      playHubProxy.on('onTimer', function (time) {\n        this.props.onTimer(time);\n      }.bind(this));\n\n      if (enemyId !== '-1') {\n        connection.start().done(function () {\n          console.log('start game');\n          playHubProxy.invoke('gameStart', userId);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      playHubProxy.off('onGameStart');\n      playHubProxy.off('onEnemyBet');\n      playHubProxy.off('onBet');\n      playHubProxy.off('onStopGame');\n      playHubProxy.off('onMessage');\n      playHubProxy.off('onPlayOffer');\n      playHubProxy.off('onTimer');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return PlayConnection;\n}(Component);\n\nfunction mapStateToProps(state) {\n  var user = state.playTable.user;\n  return {\n    user: user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onGameStart: function onGameStart(user, enemy, messages) {\n      return dispatch(_onGameStart(user, enemy, messages));\n    },\n    onMessage: function onMessage(message) {\n      return dispatch(_onMessage(message));\n    },\n    setActivePlayer: function setActivePlayer(id) {\n      return dispatch(_setActivePlayer(id));\n    },\n    onBet: function onBet(user) {\n      return dispatch(_onBet(user));\n    },\n    onEnemyBet: function onEnemyBet(enemy) {\n      return dispatch(_onEnemyBet(enemy));\n    },\n    onTimer: function onTimer(time) {\n      return dispatch(_onTimer(time));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayConnection);","map":{"version":3,"sources":["D:\\C#\\blackjack_WebAPI - new\\front-end\\src\\Hubs\\PlayTableHub.js"],"names":["Component","history","hubConnection","connect","scrollDown","onGameStart","onBet","onEnemyBet","onMessage","onTimer","setActivePlayer","connection","playHubProxy","createHubProxy","PlayConnection","userId","parseInt","localStorage","getItem","enemyId","on","user","enemy","messages","props","bind","dibsBet","tmp","document","createElement","innerHTML","getElementById","appendChild","push","message","console","log","bet","enemyBet","firstBet","setState","isBet","enableBet","onPlayWithUserHandler","isRaise","isCheck","isFold","time","start","done","invoke","off","mapStateToProps","state","playTable","mapDispatchToProps","dispatch","id"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAT,QAA2B,4BAA3B;AAEA,SAASC,WAAW,IAAXA,YAAT,EACQC,KAAK,IAALA,MADR,EAEQC,UAAU,IAAVA,WAFR,EAGQC,SAAS,IAATA,UAHR,EAIQC,OAAO,IAAPA,QAJR,EAKQC,eAAe,IAAfA,gBALR,QAK+B,4BAL/B;AAOA,OAAO,IAAMC,UAAU,GAAGT,aAAa,CAAC,uBAAD,CAAhC;AAAA,IAA2DU,YAAY,GAAGD,UAAU,CAACE,cAAX,CAA0B,SAA1B,CAA1E;;IAEDC,c;;;;;;;;;;;;;wCACiB;AACf,UAAMC,MAAM,GAAGC,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAD,CAAvB;AACA,UAAMC,OAAO,GAAGH,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAD,CAAxB;AAEAN,MAAAA,YAAY,CAACQ,EAAb,CAAgB,aAAhB,EAA+B,UAASC,IAAT,EAAeC,KAAf,EAAsBC,QAAtB,EAA+B;AAC1D,aAAKC,KAAL,CAAWnB,WAAX,CAAuBgB,IAAvB,EAA6BC,KAA7B,EAAoCC,QAApC,EAD0D,CAE1D;AACA;AACA;;AACAnB,QAAAA,UAAU;AACb,OAN8B,CAM7BqB,IAN6B,CAMxB,IANwB,CAA/B;AAQAb,MAAAA,YAAY,CAACQ,EAAb,CAAgB,YAAhB,EAA8B,UAASE,KAAT,EAAgBI,OAAhB,EAAwB;AAClD,YAAIC,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;AACAF,QAAAA,GAAG,CAACG,SAAJ,GAAgBJ,OAAhB;AACAE,QAAAA,QAAQ,CAACG,cAAT,CAAwB,cAAxB,EAAwCC,WAAxC,CAAoDL,GAApD;AACA,aAAKH,KAAL,CAAWjB,UAAX,CAAsBe,KAAtB;AACH,OAL6B,CAK5BG,IAL4B,CAKvB,IALuB,CAA9B;AAOAb,MAAAA,YAAY,CAACQ,EAAb,CAAgB,OAAhB,EAAyB,UAASC,IAAT,EAAc;AACnC,aAAKG,KAAL,CAAWlB,KAAX,CAAiBe,IAAjB;AACH,OAFwB,CAEvBI,IAFuB,CAElB,IAFkB,CAAzB;AAIAb,MAAAA,YAAY,CAACQ,EAAb,CAAgB,YAAhB,EAA8B,YAAU;AACpCnB,QAAAA,OAAO,CAACgC,IAAR,CAAa,UAAb;AACH,OAFD;AAIArB,MAAAA,YAAY,CAACQ,EAAb,CAAgB,WAAhB,EAA6B,UAASc,OAAT,EAAiB;AAC1C,aAAKV,KAAL,CAAWhB,SAAX,CAAqB0B,OAArB;AACA9B,QAAAA,UAAU;AACb,OAH4B,CAG3BqB,IAH2B,CAGtB,IAHsB,CAA7B;AAKAb,MAAAA,YAAY,CAACQ,EAAb,CAAgB,aAAhB,EAA+B,UAASD,OAAT,EAAiB;AAC5CgB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAKZ,KAAL,CAAWd,eAAX,CAA2BK,MAA3B;;AACA,YAAG,KAAKS,KAAL,CAAWH,IAAX,CAAgBgB,GAAhB,KAAwB,KAAKb,KAAL,CAAWH,IAAX,CAAgBiB,QAAxC,IAAoD,KAAKd,KAAL,CAAWH,IAAX,CAAgBgB,GAAhB,GAAsB,CAA1E,IAA+E,KAAKb,KAAL,CAAWH,IAAX,CAAgBkB,QAAlG,EAA2G;AACvG,eAAKC,QAAL,CAAc;AACVC,YAAAA,KAAK,EAAE,KADG;AAEVF,YAAAA,QAAQ,EAAE,KAFA;AAGVG,YAAAA,SAAS,EAAE;AAHD,WAAd;AAKA,eAAKlB,KAAL,CAAWmB,qBAAX;AACH,SAPD,MAOO,IAAGxB,OAAO,KAAKH,QAAQ,CAACC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAD,CAAvB,EAAwD;AAC3D,eAAKsB,QAAL,CAAc;AACVE,YAAAA,SAAS,EAAE,KADD;AAEVE,YAAAA,OAAO,EAAE,KAFC;AAGVC,YAAAA,OAAO,EAAE,KAHC;AAIVC,YAAAA,MAAM,EAAE;AAJE,WAAd;AAMH,SAPM,MAOD;AACF,eAAKN,QAAL,CAAc;AACVE,YAAAA,SAAS,EAAE,IADD;AAEVI,YAAAA,MAAM,EAAE,IAFE;AAGVD,YAAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWH,IAAX,CAAgBiB,QAAhB,GAA2B;AAH1B,WAAd;AAKH;AACJ,OAxB8B,CAwB7Bb,IAxB6B,CAwBxB,IAxBwB,CAA/B;AA0BAb,MAAAA,YAAY,CAACQ,EAAb,CAAgB,SAAhB,EAA2B,UAAS2B,IAAT,EAAc;AACrC,aAAKvB,KAAL,CAAWf,OAAX,CAAmBsC,IAAnB;AACH,OAF0B,CAEzBtB,IAFyB,CAEpB,IAFoB,CAA3B;;AAIA,UAAGN,OAAO,KAAK,IAAf,EAAoB;AAChBR,QAAAA,UAAU,CAACqC,KAAX,GAAmBC,IAAnB,CAAwB,YAAU;AAC9Bd,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAxB,UAAAA,YAAY,CAACsC,MAAb,CAAoB,WAApB,EAAiCnC,MAAjC;AACH,SAHD;AAIH;AACJ;;;2CAEqB;AAClBH,MAAAA,YAAY,CAACuC,GAAb,CAAiB,aAAjB;AACAvC,MAAAA,YAAY,CAACuC,GAAb,CAAiB,YAAjB;AACAvC,MAAAA,YAAY,CAACuC,GAAb,CAAiB,OAAjB;AACAvC,MAAAA,YAAY,CAACuC,GAAb,CAAiB,YAAjB;AACAvC,MAAAA,YAAY,CAACuC,GAAb,CAAiB,WAAjB;AACAvC,MAAAA,YAAY,CAACuC,GAAb,CAAiB,aAAjB;AACAvC,MAAAA,YAAY,CAACuC,GAAb,CAAiB,SAAjB;AACH;;;6BAEO;AACJ,aAAO,IAAP;AACH;;;;EAnFwBnD,S;;AAsF7B,SAASoD,eAAT,CAAyBC,KAAzB,EAAgC;AAAA,MACpBhC,IADoB,GACXgC,KAAK,CAACC,SADK,CACpBjC,IADoB;AAE5B,SAAO;AACHA,IAAAA,IAAI,EAAJA;AADG,GAAP;AAGH;;AAED,SAASkC,kBAAT,CAA4BC,QAA5B,EAAqC;AACjC,SAAM;AACFnD,IAAAA,WAAW,EAAE,qBAACgB,IAAD,EAAOC,KAAP,EAAcC,QAAd;AAAA,aAA2BiC,QAAQ,CAACnD,YAAW,CAACgB,IAAD,EAAOC,KAAP,EAAcC,QAAd,CAAZ,CAAnC;AAAA,KADX;AAEFf,IAAAA,SAAS,EAAE,mBAAC0B,OAAD;AAAA,aAAasB,QAAQ,CAAChD,UAAS,CAAC0B,OAAD,CAAV,CAArB;AAAA,KAFT;AAGFxB,IAAAA,eAAe,EAAE,yBAAC+C,EAAD;AAAA,aAAQD,QAAQ,CAAC9C,gBAAe,CAAC+C,EAAD,CAAhB,CAAhB;AAAA,KAHf;AAIFnD,IAAAA,KAAK,EAAE,eAACe,IAAD;AAAA,aAAUmC,QAAQ,CAAClD,MAAK,CAACe,IAAD,CAAN,CAAlB;AAAA,KAJL;AAKFd,IAAAA,UAAU,EAAE,oBAACe,KAAD;AAAA,aAAWkC,QAAQ,CAACjD,WAAU,CAACe,KAAD,CAAX,CAAnB;AAAA,KALV;AAMFb,IAAAA,OAAO,EAAE,iBAACsC,IAAD;AAAA,aAAUS,QAAQ,CAAC/C,QAAO,CAACsC,IAAD,CAAR,CAAlB;AAAA;AANP,GAAN;AAQH;;AAED,eAAe5C,OAAO,CAACiD,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CzC,cAA7C,CAAf","sourcesContent":["import { Component } from 'react'\r\n\r\nimport { history } from '../store/history'\r\n\r\nimport { hubConnection } from 'signalr-no-jquery';\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { scrollDown } from '../components/UI/Chat/Chat'\r\n\r\nimport { onGameStart,\r\n        onBet,\r\n        onEnemyBet,\r\n        onMessage,\r\n        onTimer,\r\n        setActivePlayer } from '../store/actions/playTable'\r\n\r\nexport const connection = hubConnection('http://localhost:3001'), playHubProxy = connection.createHubProxy('playHub');\r\n\r\nclass PlayConnection extends Component{\r\n    componentDidMount(){\r\n        const userId = parseInt(localStorage.getItem('userId'));\r\n        const enemyId = parseInt(localStorage.getItem('enemyId'));\r\n\r\n        playHubProxy.on('onGameStart', function(user, enemy, messages){\r\n            this.props.onGameStart(user, enemy, messages);\r\n            // if(this.props.user.activePlayerId === userId){\r\n            //     playHubProxy.invoke('playOffer', userId);\r\n            // }\r\n            scrollDown();\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onEnemyBet', function(enemy, dibsBet){\r\n            var tmp = document.createElement('div');\r\n            tmp.innerHTML = dibsBet;\r\n            document.getElementById('enemyDibsBet').appendChild(tmp);\r\n            this.props.onEnemyBet(enemy);\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onBet', function(user){                  \r\n            this.props.onBet(user);\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onStopGame', function(){\r\n            history.push('/profile');\r\n        });\r\n\r\n        playHubProxy.on('onMessage', function(message){\r\n            this.props.onMessage(message);\r\n            scrollDown();\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onPlayOffer', function(enemyId){\r\n            console.log('onPlayOffer');\r\n            this.props.setActivePlayer(userId);\r\n            if(this.props.user.bet === this.props.user.enemyBet && this.props.user.bet > 0 && this.props.user.firstBet){\r\n                this.setState({\r\n                    isBet: false,\r\n                    firstBet: false,\r\n                    enableBet: false\r\n                });\r\n                this.props.onPlayWithUserHandler();\r\n            } else if(enemyId === parseInt(localStorage.getItem('userId'))){\r\n                this.setState({\r\n                    enableBet: false,\r\n                    isRaise: false,\r\n                    isCheck: false,\r\n                    isFold: false\r\n                });\r\n            } else{\r\n                this.setState({\r\n                    enableBet: true,\r\n                    isFold: true,\r\n                    isCheck: this.props.user.enemyBet > 0\r\n                });\r\n            }\r\n        }.bind(this));\r\n\r\n        playHubProxy.on('onTimer', function(time){\r\n            this.props.onTimer(time);\r\n        }.bind(this));            \r\n\r\n        if(enemyId !== '-1'){\r\n            connection.start().done(function(){\r\n                console.log('start game');\r\n                playHubProxy.invoke('gameStart', userId);\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        playHubProxy.off('onGameStart');\r\n        playHubProxy.off('onEnemyBet');\r\n        playHubProxy.off('onBet');\r\n        playHubProxy.off('onStopGame');\r\n        playHubProxy.off('onMessage');\r\n        playHubProxy.off('onPlayOffer');\r\n        playHubProxy.off('onTimer');\r\n    }\r\n\r\n    render(){\r\n        return null;\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    const { user } = state.playTable;\r\n    return {\r\n        user\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return{\r\n        onGameStart: (user, enemy, messages) => dispatch(onGameStart(user, enemy, messages)),\r\n        onMessage: (message) => dispatch(onMessage(message)),\r\n        setActivePlayer: (id) => dispatch(setActivePlayer(id)),\r\n        onBet: (user) => dispatch(onBet(user)),\r\n        onEnemyBet: (enemy) => dispatch(onEnemyBet(enemy)),\r\n        onTimer: (time) => dispatch(onTimer(time))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayConnection)"]},"metadata":{},"sourceType":"module"}