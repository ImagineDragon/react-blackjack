{"ast":null,"code":"import _objectSpread from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\C#\\\\blackjack_WebAPI - new\\\\front-end\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { FETCH_PLAY_START, FETCH_MAKE_BET, HAND_SUCCESS, WIN_GAME, LOSE_GAME, DRAW_GAME, DEAL_HAND, PLAY_HAND, DATA_USER, ENOUGH_HAND } from './actionType'; // import socketIOClient from \"socket.io-client\"\n\nimport axios from 'axios';\nexport function fetchMakeBet(bet, cash, isPlay) {\n  return {\n    type: FETCH_MAKE_BET,\n    bet: bet,\n    cash: cash,\n    isPlay: isPlay\n  };\n}\nexport function getDataUser(userId) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var data, setStateUser, respons;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  userId: userId\n                };\n                _context.next = 3;\n                return axios.post('http://localhost:3001/play', data);\n\n              case 3:\n                respons = _context.sent;\n\n                if (respons.data) {\n                  setStateUser = {\n                    bet: 0,\n                    cash: respons.data.bet,\n                    name: respons.data.name,\n                    isPlay: true\n                  };\n                }\n\n                dispatch(dataUser(setStateUser));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onPlayWithUserHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var state, playerHand, playerHandSum, set_state;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = getState().playTable;\n                _context2.next = 3;\n                return [getCard(state), getCard(state)];\n\n              case 3:\n                playerHand = _context2.sent;\n                _context2.next = 6;\n                return getSum(playerHand);\n\n              case 6:\n                playerHandSum = _context2.sent;\n                set_state = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum,\n                  isPlay: false,\n                  isEnough: true,\n                  isMore: true\n                };\n                dispatch(handSuccess(set_state));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onMoreWithUserHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var state, playerHand, playerHandSum, play_setState;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                state = getState().playTable;\n                playerHand = state.playerHand;\n                playerHand.push(getCard(state));\n                _context3.next = 5;\n                return getSum(playerHand);\n\n              case 5:\n                playerHandSum = _context3.sent;\n                play_setState = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum\n                };\n                dispatch(playHand(play_setState));\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onEnoughWithUserHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n        var state, set_state;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                state = getState().playTable;\n                set_state = {\n                  isPlay: false,\n                  isEnough: false,\n                  isMore: false\n                };\n                dispatch(enoughHand(set_state));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x6, _x7) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onPlayHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch, getState) {\n        var state, playerHand, dealerHand, playerHandSum, dealerHandSum, set_state;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                state = getState().playTable;\n                _context5.next = 3;\n                return [getCard(state), getCard(state)];\n\n              case 3:\n                playerHand = _context5.sent;\n                _context5.next = 6;\n                return [getCard(state)];\n\n              case 6:\n                dealerHand = _context5.sent;\n                _context5.next = 9;\n                return getSum(playerHand);\n\n              case 9:\n                playerHandSum = _context5.sent;\n                _context5.next = 12;\n                return getSum(dealerHand);\n\n              case 12:\n                dealerHandSum = _context5.sent;\n                set_state = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum,\n                  dealerHand: dealerHand,\n                  dealerHandSum: dealerHandSum,\n                  isPlay: false,\n                  isEnough: true,\n                  isMore: true\n                };\n                dispatch(handSuccess(set_state));\n\n                if (playerHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.cash + state.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      dealerHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(winGame(win_setState));\n                    onDeletDib();\n                    alert('У Вас BlackJack!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (playerHandSum > 21) {\n                  setTimeout(function () {\n                    var cash = state.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    onDeletDib();\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      dealerHandSum: 0,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x8, _x9) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onEnoughHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(dispatch, getState) {\n        var state, dealerHand, dealerHandSum, deal_setState_first, deal_setState;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                state = getState().playTable;\n                dealerHand = state.dealerHand;\n                _context6.next = 4;\n                return dealerHand.push(getCard(state));\n\n              case 4:\n                _context6.next = 6;\n                return getSum(dealerHand);\n\n              case 6:\n                dealerHandSum = _context6.sent;\n                deal_setState_first = {\n                  dealerHand: dealerHand,\n                  dealerHandSum: dealerHandSum\n                };\n                _context6.next = 10;\n                return dispatch(dealHand(deal_setState_first));\n\n              case 10:\n                if (!(dealerHandSum < 17)) {\n                  _context6.next = 21;\n                  break;\n                }\n\n                _context6.next = 13;\n                return dealerHand.push(getCard(state));\n\n              case 13:\n                _context6.next = 15;\n                return getSum(dealerHand);\n\n              case 15:\n                dealerHandSum = _context6.sent;\n                deal_setState = {\n                  dealerHand: dealerHand,\n                  dealerHandSum: dealerHandSum\n                };\n                _context6.next = 19;\n                return dispatch(dealHand(deal_setState));\n\n              case 19:\n                _context6.next = 10;\n                break;\n\n              case 21:\n                if (dealerHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.cash;\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      dealerHandSum: 0,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    dispatch(loseGame(lose_setState));\n                    onDeletDib();\n                    updateData(cash);\n                    alert('У дилера BlackJack! Вы проиграли(((((');\n                  }, 600);\n                } else if (dealerHandSum > 21 || state.playerHandSum > dealerHandSum) {\n                  setTimeout(function () {\n                    var cash = state.cash + state.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      dealerHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    dispatch(winGame(win_setState));\n                    onDeletDib();\n                    updateData(cash);\n                    alert('Вы выграли!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (dealerHandSum === state.playerHandSum) {\n                  setTimeout(function () {\n                    var cash = state.cash + state.bet;\n                    var draw_setState = {\n                      playerHandSum: 0,\n                      dealerHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    dispatch(drawGame(draw_setState));\n                    onDeletDib();\n                    updateData(cash);\n                    alert('Победила дружба!!!!!!!!!!!!!');\n                  }, 600);\n                } else {\n                  setTimeout(function () {\n                    var cash = state.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    onDeletDib();\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      dealerHandSum: 0,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 22:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x10, _x11) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function onMoreHandler() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref7 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(dispatch, getState) {\n        var state, playerHand, playerHandSum, play_setState;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                state = getState().playTable;\n                playerHand = state.playerHand;\n                playerHand.push(getCard(state));\n                _context7.next = 5;\n                return getSum(playerHand);\n\n              case 5:\n                playerHandSum = _context7.sent;\n                play_setState = {\n                  playerHand: playerHand,\n                  playerHandSum: playerHandSum\n                };\n                dispatch(playHand(play_setState));\n\n                if (playerHandSum === 21) {\n                  setTimeout(function () {\n                    var cash = state.cash + state.bet * 2;\n                    var win_setState = {\n                      playerHandSum: 0,\n                      dealerHandSum: 0,\n                      bet: 0,\n                      cash: cash,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    dispatch(winGame(win_setState));\n                    onDeletDib();\n                    updateData(cash);\n                    alert('У Вас BlackJack!!!!!!!!!!!!!');\n                  }, 600);\n                } else if (playerHandSum > 21) {\n                  setTimeout(function () {\n                    var cash = state.cash;\n                    alert('Вы проиграли!!!!!!!');\n                    onDeletDib();\n                    var lose_setState = {\n                      playerHandSum: 0,\n                      bet: 0,\n                      dealerHandSum: 0,\n                      playerHand: [],\n                      dealerHand: [],\n                      isEnough: false,\n                      isMore: false\n                    };\n                    updateData(cash);\n                    dispatch(loseGame(lose_setState));\n                  }, 600);\n                }\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function (_x12, _x13) {\n        return _ref7.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function handSuccess(set_state) {\n  return _objectSpread({\n    type: HAND_SUCCESS\n  }, set_state);\n}\nexport function enoughHand(set_state) {\n  return _objectSpread({\n    type: ENOUGH_HAND\n  }, set_state);\n}\nexport function dataUser(setStateUser) {\n  return _objectSpread({\n    type: DATA_USER\n  }, setStateUser);\n}\nexport function dealHand(deal_setState) {\n  return _objectSpread({\n    type: DEAL_HAND\n  }, deal_setState);\n}\nexport function playHand(play_setState) {\n  return _objectSpread({\n    type: PLAY_HAND\n  }, play_setState);\n}\nexport function winGame(win_setState) {\n  return _objectSpread({\n    type: WIN_GAME\n  }, win_setState);\n}\nexport function loseGame(lose_setState) {\n  return _objectSpread({\n    type: LOSE_GAME\n  }, lose_setState);\n}\nexport function drawGame(draw_setState) {\n  return _objectSpread({\n    type: DRAW_GAME\n  }, draw_setState);\n}\nexport function fetchPlayStart() {\n  return {\n    type: FETCH_PLAY_START\n  };\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getCard(state) {\n  return state.deck[getRandomInt(0, state.deck.length - 1)];\n}\n\nfunction getSum(hand) {\n  var sum = 0;\n\n  for (var i = 0; i < hand.length; i++) {\n    var card = hand[i];\n\n    if (card.name !== 'Ace') {\n      sum += card.value;\n    }\n  }\n\n  for (var _i = 0; _i < hand.length; _i++) {\n    var _card = hand[_i];\n\n    if (_card.name === 'Ace') {\n      if (sum > 10) {\n        sum++;\n      } else {\n        sum += _card.value;\n      }\n    }\n  }\n\n  return sum;\n}\n\nfunction onDeletDib() {\n  return document.getElementById('dibsBet').innerHTML = '';\n}\n\nfunction updateData(_x14) {\n  return _updateData.apply(this, arguments);\n}\n\nfunction _updateData() {\n  _updateData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee8(cash) {\n    var userUpdate, dataUpdate;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            userUpdate = localStorage.getItem('userId');\n            dataUpdate = {\n              userUpdate: userUpdate,\n              cash: cash //await axios.put('http://localhost:3001/playUser', dataUpdate);\n              // if(respons.data){\n              //     const setStateUser = {\n              //         cash: respons.data.bet,\n              //         name: respons.data.name\n              //     }\n              //     dispatch(dataUser(setStateUser));\n              // }\n\n            };\n\n          case 2:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, this);\n  }));\n  return _updateData.apply(this, arguments);\n}","map":{"version":3,"sources":["D:\\C#\\blackjack_WebAPI - new\\front-end\\src\\store\\actions\\playTable.js"],"names":["FETCH_PLAY_START","FETCH_MAKE_BET","HAND_SUCCESS","WIN_GAME","LOSE_GAME","DRAW_GAME","DEAL_HAND","PLAY_HAND","DATA_USER","ENOUGH_HAND","axios","fetchMakeBet","bet","cash","isPlay","type","getDataUser","userId","dispatch","data","post","respons","setStateUser","name","dataUser","onPlayWithUserHandler","getState","state","playTable","getCard","playerHand","getSum","playerHandSum","set_state","isEnough","isMore","handSuccess","onMoreWithUserHandler","push","play_setState","playHand","onEnoughWithUserHandler","enoughHand","onPlayHandler","dealerHand","dealerHandSum","setTimeout","win_setState","updateData","winGame","onDeletDib","alert","lose_setState","loseGame","onEnoughHandler","deal_setState_first","dealHand","deal_setState","draw_setState","drawGame","onMoreHandler","fetchPlayStart","getRandomInt","min","max","Math","floor","random","deck","length","hand","sum","i","card","value","document","getElementById","innerHTML","userUpdate","localStorage","getItem","dataUpdate"],"mappings":"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","sourcesContent":["import {FETCH_PLAY_START,\n        FETCH_MAKE_BET,\n        HAND_SUCCESS,\n        WIN_GAME,\n        LOSE_GAME,\n        DRAW_GAME,\n        DEAL_HAND,\n        PLAY_HAND,\n        DATA_USER,\n        ENOUGH_HAND} from './actionType'\n// import socketIOClient from \"socket.io-client\"\nimport axios from 'axios'\n\nexport function fetchMakeBet(bet, cash, isPlay){\n    return {\n        type: FETCH_MAKE_BET,\n        bet, cash, isPlay\n    }\n}\n\nexport function getDataUser(userId){\n    return async dispatch =>{\n        const data = {\n            userId: userId  \n        }\n        let setStateUser;\n        const respons = await axios.post('http://localhost:3001/play', data);\n        if(respons.data){\n            setStateUser = {\n                bet: 0,\n                cash: respons.data.bet,\n                name: respons.data.name,\n                isPlay: true\n            }\n        }\n        \n        dispatch(dataUser(setStateUser));\n    }\n       \n}\n\nexport function onPlayWithUserHandler (){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        let playerHand = await [getCard(state), getCard(state)];\n        let playerHandSum = await getSum(playerHand);\n\n        const set_state = {\n            playerHand,\n            playerHandSum,\n            isPlay: false,\n            isEnough: true,\n            isMore: true\n        };\n\n        dispatch(handSuccess(set_state));\n    }\n}\n\nexport function onMoreWithUserHandler(){\n    return async (dispatch, getState) =>{\n        const state = getState().playTable;\n        let playerHand = state.playerHand;\n        playerHand.push(getCard(state));\n        let playerHandSum = await getSum(playerHand);\n        const play_setState = {\n            playerHand,\n            playerHandSum\n        }\n        dispatch(playHand(play_setState));\n    }\n}\n\nexport function onEnoughWithUserHandler(){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        const set_state = {\n            isPlay: false,\n            isEnough: false,\n            isMore: false\n        };\n\n        dispatch(enoughHand(set_state));\n    }\n}\n\nexport function onPlayHandler (){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        let playerHand = await [getCard(state), getCard(state)];\n        let dealerHand = await [getCard(state)];\n        let playerHandSum = await getSum(playerHand);\n        let dealerHandSum = await getSum(dealerHand);\n\n        const set_state = {\n            playerHand,\n            playerHandSum,\n            dealerHand,\n            dealerHandSum,\n            isPlay: false,\n            isEnough: true,\n            isMore: true\n        };\n\n        dispatch(handSuccess(set_state));\n\n        if(playerHandSum === 21){ \n            setTimeout(()=>{\n                let cash = state.cash + state.bet*2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    dealerHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(winGame(win_setState)); \n                onDeletDib();  \n                alert('У Вас BlackJack!!!!!!!!!!!!!'); \n            }, 600);           \n            \n        }else if(playerHandSum > 21){\n            setTimeout(()=>{\n                let cash = state.cash;\n                alert('Вы проиграли!!!!!!!');\n                onDeletDib();\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    dealerHandSum: 0,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));  \n            }, 600);\n            \n        }   \n    }    \n}\n\nexport function onEnoughHandler(){\n    return async (dispatch, getState) => {\n        const state = getState().playTable;\n        let dealerHand = state.dealerHand;\n        await dealerHand.push(getCard(state));\n        let dealerHandSum = await getSum(dealerHand);\n        const deal_setState_first = {\n            dealerHand,\n            dealerHandSum\n        }\n        await dispatch(dealHand(deal_setState_first));\n        \n        while(dealerHandSum < 17){\n            await dealerHand.push(getCard(state));\n            dealerHandSum = await getSum(dealerHand);\n            const deal_setState = {\n                dealerHand,\n                dealerHandSum\n            }\n            await dispatch(dealHand(deal_setState));\n        }\n\n        if(dealerHandSum === 21){\n            setTimeout(()=>{\n                let cash = state.cash;\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    dealerHandSum: 0,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                }; \n                dispatch(loseGame(lose_setState));\n                onDeletDib(); \n                updateData(cash); \n                alert('У дилера BlackJack! Вы проиграли((((('); \n            }, 600); \n        }else if(dealerHandSum > 21 || state.playerHandSum > dealerHandSum){\n            setTimeout(()=>{\n                let cash = state.cash + state.bet*2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    dealerHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                }; \n                dispatch(winGame(win_setState));\n                onDeletDib();  \n                updateData(cash);\n                alert('Вы выграли!!!!!!!!!!!!!'); \n            }, 600);        \n        }else if(dealerHandSum === state.playerHandSum){\n            setTimeout(()=>{\n                let cash = state.cash + state.bet;\n                const draw_setState = {\n                    playerHandSum: 0,\n                    dealerHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                }; \n                dispatch(drawGame(draw_setState));\n                onDeletDib();  \n                updateData(cash);\n                alert('Победила дружба!!!!!!!!!!!!!'); \n            }, 600); \n        }else{\n            setTimeout(()=>{\n                let cash = state.cash;\n                alert('Вы проиграли!!!!!!!');\n                onDeletDib();\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    dealerHandSum: 0,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));\n            }, 600);\n        }        \n    }\n}\n\nexport function onMoreHandler(){\n    return async (dispatch, getState) =>{\n        const state = getState().playTable;\n        let playerHand = state.playerHand;\n        playerHand.push(getCard(state));\n        let playerHandSum = await getSum(playerHand);\n        const play_setState = {\n            playerHand,\n            playerHandSum\n        }\n        dispatch(playHand(play_setState));\n\n\n        if(playerHandSum === 21){ \n            setTimeout(()=>{\n                let cash = state.cash + state.bet*2;\n                const win_setState = {\n                    playerHandSum: 0,\n                    dealerHandSum: 0,\n                    bet: 0,\n                    cash,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                dispatch(winGame(win_setState));\n                onDeletDib();  \n                updateData(cash);\n                alert('У Вас BlackJack!!!!!!!!!!!!!'); \n            }, 600);           \n            \n        }else if(playerHandSum > 21){\n            setTimeout(()=>{\n                let cash = state.cash\n                alert('Вы проиграли!!!!!!!');\n                onDeletDib();\n                const lose_setState = {\n                    playerHandSum: 0,\n                    bet: 0,\n                    dealerHandSum: 0,\n                    playerHand:[],\n                    dealerHand:[],\n                    isEnough: false,\n                    isMore: false\n                };\n                updateData(cash);\n                dispatch(loseGame(lose_setState));  \n            }, 600);            \n        } \n    }\n}\n\nexport function handSuccess(set_state){\n    return{\n        type: HAND_SUCCESS,\n        ...set_state\n    }\n}\n\nexport function enoughHand(set_state){\n    return{\n        type: ENOUGH_HAND,\n        ...set_state\n    }\n}\n\nexport function dataUser(setStateUser){\n    return{\n        type: DATA_USER,\n        ...setStateUser\n    }\n}\n\nexport function dealHand(deal_setState){\n    return{\n        type: DEAL_HAND,\n        ...deal_setState\n    }\n}\n\nexport function playHand(play_setState){\n    return{\n        type: PLAY_HAND,\n        ...play_setState\n    }\n}\n\nexport function winGame(win_setState){\n    return{\n        type: WIN_GAME,\n        ...win_setState\n    }\n}\n\nexport function loseGame(lose_setState){\n    return{\n        type: LOSE_GAME,\n        ...lose_setState\n    }\n}\n\nexport function drawGame(draw_setState){\n    return{\n        type: DRAW_GAME,\n        ...draw_setState\n    }\n}\n\nexport function fetchPlayStart(){\n    return{\n        type: FETCH_PLAY_START\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getCard(state){\n    return state.deck[getRandomInt(0, state.deck.length - 1)];\n}\n\nfunction getSum (hand){\n    let sum = 0;\n\n    for( let i=0; i<hand.length; i++){\n        let card = hand[i];\n        if(card.name !== 'Ace'){\n            sum += card.value;\n        }\n    }\n\n    for(let i=0; i<hand.length; i++){\n        let card = hand[i];\n        if(card.name === 'Ace'){\n            if(sum > 10){\n                sum ++;\n            }else{\n                sum += card.value;\n            }\n        }\n    }\n\n    return sum;\n}\n\nfunction onDeletDib() {\n    return document.getElementById('dibsBet').innerHTML='';\n}\n\n\nasync function updateData(cash){\n    const userUpdate = localStorage.getItem('userId');\n    const dataUpdate ={\n        userUpdate, cash\n    }\n    //await axios.put('http://localhost:3001/playUser', dataUpdate);\n    // if(respons.data){\n    //     const setStateUser = {\n    //         cash: respons.data.bet,\n    //         name: respons.data.name\n    //     }\n    //     dispatch(dataUser(setStateUser));\n    // }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}